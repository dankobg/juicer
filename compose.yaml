services:
  # ----------------------------------------------------------------------------
  web:
    build:
      context: ./web2
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - intranet
  # ----------------------------------------------------------------------------
  juicer:
    build:
      context: ./
      dockerfile: docker/app.dockerfile
    restart: unless-stopped
    networks:
      - intranet
    depends_on:
      pg:
        condition: service_healthy
  # ----------------------------------------------------------------------------
  pg:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - intranet
  # ----------------------------------------------------------------------------
  redis:
    image: redis:7.2.5-alpine
    restart: on-failure
    # command: redis-server --include /usr/local/etc/redis/redis.conf # UNCOMMENT IF USING CUSTOM REDIS CONF
    volumes:
      - redis-data:/data
      # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf # UNCOMMENT IF USING CUSTOM REDIS CONF
    networks:
      - intranet
  # ----------------------------------------------------------------------------
  kratos:
    image: oryd/kratos:v1.2.0
    restart: unless-stopped
    command: "serve --watch-courier --config /etc/config/kratos/kratos.yaml"
    volumes:
      - ./ory/kratos:/etc/config/kratos
    networks:
      - intranet
    depends_on:
      pg:
        condition: service_healthy
      kratos-migrate:
        condition: service_completed_successfully
  # ----------------------------------------------------------------------------
  kratos-migrate:
    image: oryd/kratos:v1.2.0
    restart: on-failure
    volumes:
      - ./ory/kratos:/etc/config/kratos
    command: "migrate sql --read-from-env --config /etc/config/kratos/kratos.yaml --yes"
    networks:
      - intranet
    depends_on:
      pg:
        condition: service_healthy
  # ----------------------------------------------------------------------------
  keto:
    image: oryd/keto:v0.12.0
    restart: unless-stopped
    volumes:
      - ./ory/keto:/etc/config/keto
    command: "serve -c /etc/config/keto/keto.yaml all"
    networks:
      - intranet
    depends_on:
      pg:
        condition: service_healthy
      keto-migrate:
        condition: service_completed_successfully
  # ----------------------------------------------------------------------------
  keto-migrate:
    image: oryd/keto:v0.12.0
    restart: on-failure
    volumes:
      - ./ory/keto:/etc/config/keto
    command: "migrate up -c /etc/config/keto/keto.yaml --yes"
    networks:
      - intranet
    depends_on:
      pg:
        condition: service_healthy
  # ----------------------------------------------------------------------------
  # atlas:
  #   image: arigaio/atlas
  #   restart: on-failure
  #   volumes:
  #     - ./db/migrations:/migrations
  #     - ./db/schema.sql:/schema.sql
  #   networks:
  #     - intranet
  #   depends_on:
  #     pg:
  #       condition: service_healthy
  # ----------------------------------------------------------------------------

volumes:
  pg-data:
  redis-data:

networks:
  intranet:
    driver: bridge
