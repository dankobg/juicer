// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file juicer.proto (package pb, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message pb.Message
 */
export class Message extends Message$1<Message> {
  /**
   * @generated from oneof pb.Message.event
   */
  event: {
    /**
     * @generated from field: pb.Error error = 1;
     */
    value: Error;
    case: "error";
  } | {
    /**
     * @generated from field: pb.Echo echo = 2;
     */
    value: Echo;
    case: "echo";
  } | {
    /**
     * @generated from field: pb.ClientConnected client_connected = 3;
     */
    value: ClientConnected;
    case: "clientConnected";
  } | {
    /**
     * @generated from field: pb.ClientDisconnected client_disconnected = 4;
     */
    value: ClientDisconnected;
    case: "clientDisconnected";
  } | {
    /**
     * @generated from field: pb.HubInfo hub_info = 5;
     */
    value: HubInfo;
    case: "hubInfo";
  } | {
    /**
     * @generated from field: pb.MatchFound match_found = 6;
     */
    value: MatchFound;
    case: "matchFound";
  } | {
    /**
     * @generated from field: pb.SeekingCount seeking_count = 7;
     */
    value: SeekingCount;
    case: "seekingCount";
  } | {
    /**
     * @generated from field: pb.SeekGame seek_game = 8;
     */
    value: SeekGame;
    case: "seekGame";
  } | {
    /**
     * @generated from field: pb.CancelSeekGame cancel_seek_game = 9;
     */
    value: CancelSeekGame;
    case: "cancelSeekGame";
  } | {
    /**
     * @generated from field: pb.GameFinished game_finished = 10;
     */
    value: GameFinished;
    case: "gameFinished";
  } | {
    /**
     * @generated from field: pb.AbortGame abort_game = 11;
     */
    value: AbortGame;
    case: "abortGame";
  } | {
    /**
     * @generated from field: pb.OfferDraw offer_draw = 12;
     */
    value: OfferDraw;
    case: "offerDraw";
  } | {
    /**
     * @generated from field: pb.AcceptDraw accept_draw = 13;
     */
    value: AcceptDraw;
    case: "acceptDraw";
  } | {
    /**
     * @generated from field: pb.PlayMoveUCI play_move_uci = 14;
     */
    value: PlayMoveUCI;
    case: "playMoveUci";
  } | {
    /**
     * @generated from field: pb.Chat chat = 15;
     */
    value: Chat;
    case: "chat";
  } | {
    /**
     * @generated from field: pb.Move move = 16;
     */
    value: Move;
    case: "move";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Message>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Message";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error", kind: "message", T: Error, oneof: "event" },
    { no: 2, name: "echo", kind: "message", T: Echo, oneof: "event" },
    { no: 3, name: "client_connected", kind: "message", T: ClientConnected, oneof: "event" },
    { no: 4, name: "client_disconnected", kind: "message", T: ClientDisconnected, oneof: "event" },
    { no: 5, name: "hub_info", kind: "message", T: HubInfo, oneof: "event" },
    { no: 6, name: "match_found", kind: "message", T: MatchFound, oneof: "event" },
    { no: 7, name: "seeking_count", kind: "message", T: SeekingCount, oneof: "event" },
    { no: 8, name: "seek_game", kind: "message", T: SeekGame, oneof: "event" },
    { no: 9, name: "cancel_seek_game", kind: "message", T: CancelSeekGame, oneof: "event" },
    { no: 10, name: "game_finished", kind: "message", T: GameFinished, oneof: "event" },
    { no: 11, name: "abort_game", kind: "message", T: AbortGame, oneof: "event" },
    { no: 12, name: "offer_draw", kind: "message", T: OfferDraw, oneof: "event" },
    { no: 13, name: "accept_draw", kind: "message", T: AcceptDraw, oneof: "event" },
    { no: 14, name: "play_move_uci", kind: "message", T: PlayMoveUCI, oneof: "event" },
    { no: 15, name: "chat", kind: "message", T: Chat, oneof: "event" },
    { no: 16, name: "move", kind: "message", T: Move, oneof: "event" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message {
    return new Message().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message {
    return new Message().fromJsonString(jsonString, options);
  }

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean {
    return proto3.util.equals(Message, a, b);
  }
}

/**
 * @generated from message pb.Error
 */
export class Error extends Message$1<Error> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Error>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Error";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Error {
    return new Error().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Error {
    return new Error().fromJsonString(jsonString, options);
  }

  static equals(a: Error | PlainMessage<Error> | undefined, b: Error | PlainMessage<Error> | undefined): boolean {
    return proto3.util.equals(Error, a, b);
  }
}

/**
 * @generated from message pb.Echo
 */
export class Echo extends Message$1<Echo> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Echo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Echo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Echo {
    return new Echo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Echo {
    return new Echo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Echo {
    return new Echo().fromJsonString(jsonString, options);
  }

  static equals(a: Echo | PlainMessage<Echo> | undefined, b: Echo | PlainMessage<Echo> | undefined): boolean {
    return proto3.util.equals(Echo, a, b);
  }
}

/**
 * @generated from message pb.ClientConnected
 */
export class ClientConnected extends Message$1<ClientConnected> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ClientConnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ClientConnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientConnected {
    return new ClientConnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientConnected {
    return new ClientConnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientConnected {
    return new ClientConnected().fromJsonString(jsonString, options);
  }

  static equals(a: ClientConnected | PlainMessage<ClientConnected> | undefined, b: ClientConnected | PlainMessage<ClientConnected> | undefined): boolean {
    return proto3.util.equals(ClientConnected, a, b);
  }
}

/**
 * @generated from message pb.ClientDisconnected
 */
export class ClientDisconnected extends Message$1<ClientDisconnected> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ClientDisconnected>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.ClientDisconnected";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientDisconnected {
    return new ClientDisconnected().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientDisconnected {
    return new ClientDisconnected().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientDisconnected {
    return new ClientDisconnected().fromJsonString(jsonString, options);
  }

  static equals(a: ClientDisconnected | PlainMessage<ClientDisconnected> | undefined, b: ClientDisconnected | PlainMessage<ClientDisconnected> | undefined): boolean {
    return proto3.util.equals(ClientDisconnected, a, b);
  }
}

/**
 * @generated from message pb.HubInfo
 */
export class HubInfo extends Message$1<HubInfo> {
  /**
   * @generated from field: int32 lobby = 1;
   */
  lobby = 0;

  /**
   * @generated from field: int32 rooms = 2;
   */
  rooms = 0;

  /**
   * @generated from field: int32 playing = 3;
   */
  playing = 0;

  constructor(data?: PartialMessage<HubInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.HubInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "lobby", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "rooms", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "playing", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HubInfo {
    return new HubInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HubInfo {
    return new HubInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HubInfo {
    return new HubInfo().fromJsonString(jsonString, options);
  }

  static equals(a: HubInfo | PlainMessage<HubInfo> | undefined, b: HubInfo | PlainMessage<HubInfo> | undefined): boolean {
    return proto3.util.equals(HubInfo, a, b);
  }
}

/**
 * @generated from message pb.MatchFound
 */
export class MatchFound extends Message$1<MatchFound> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  /**
   * @generated from field: string color = 3;
   */
  color = "";

  constructor(data?: PartialMessage<MatchFound>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.MatchFound";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "color", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MatchFound {
    return new MatchFound().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MatchFound {
    return new MatchFound().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MatchFound {
    return new MatchFound().fromJsonString(jsonString, options);
  }

  static equals(a: MatchFound | PlainMessage<MatchFound> | undefined, b: MatchFound | PlainMessage<MatchFound> | undefined): boolean {
    return proto3.util.equals(MatchFound, a, b);
  }
}

/**
 * @generated from message pb.SeekingCount
 */
export class SeekingCount extends Message$1<SeekingCount> {
  /**
   * @generated from field: int32 count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<SeekingCount>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.SeekingCount";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeekingCount {
    return new SeekingCount().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeekingCount {
    return new SeekingCount().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeekingCount {
    return new SeekingCount().fromJsonString(jsonString, options);
  }

  static equals(a: SeekingCount | PlainMessage<SeekingCount> | undefined, b: SeekingCount | PlainMessage<SeekingCount> | undefined): boolean {
    return proto3.util.equals(SeekingCount, a, b);
  }
}

/**
 * @generated from message pb.SeekGame
 */
export class SeekGame extends Message$1<SeekGame> {
  /**
   * @generated from field: string game_mode = 1;
   */
  gameMode = "";

  constructor(data?: PartialMessage<SeekGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.SeekGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_mode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SeekGame {
    return new SeekGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SeekGame {
    return new SeekGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SeekGame {
    return new SeekGame().fromJsonString(jsonString, options);
  }

  static equals(a: SeekGame | PlainMessage<SeekGame> | undefined, b: SeekGame | PlainMessage<SeekGame> | undefined): boolean {
    return proto3.util.equals(SeekGame, a, b);
  }
}

/**
 * @generated from message pb.CancelSeekGame
 */
export class CancelSeekGame extends Message$1<CancelSeekGame> {
  constructor(data?: PartialMessage<CancelSeekGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.CancelSeekGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelSeekGame {
    return new CancelSeekGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelSeekGame {
    return new CancelSeekGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelSeekGame {
    return new CancelSeekGame().fromJsonString(jsonString, options);
  }

  static equals(a: CancelSeekGame | PlainMessage<CancelSeekGame> | undefined, b: CancelSeekGame | PlainMessage<CancelSeekGame> | undefined): boolean {
    return proto3.util.equals(CancelSeekGame, a, b);
  }
}

/**
 * @generated from message pb.GameFinished
 */
export class GameFinished extends Message$1<GameFinished> {
  /**
   * @generated from field: string game_id = 1;
   */
  gameId = "";

  /**
   * @generated from field: string room_id = 2;
   */
  roomId = "";

  /**
   * @generated from field: string result = 3;
   */
  result = "";

  /**
   * @generated from field: string status = 4;
   */
  status = "";

  constructor(data?: PartialMessage<GameFinished>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.GameFinished";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "game_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "room_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "result", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameFinished {
    return new GameFinished().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameFinished {
    return new GameFinished().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameFinished {
    return new GameFinished().fromJsonString(jsonString, options);
  }

  static equals(a: GameFinished | PlainMessage<GameFinished> | undefined, b: GameFinished | PlainMessage<GameFinished> | undefined): boolean {
    return proto3.util.equals(GameFinished, a, b);
  }
}

/**
 * @generated from message pb.AbortGame
 */
export class AbortGame extends Message$1<AbortGame> {
  constructor(data?: PartialMessage<AbortGame>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.AbortGame";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AbortGame {
    return new AbortGame().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AbortGame {
    return new AbortGame().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AbortGame {
    return new AbortGame().fromJsonString(jsonString, options);
  }

  static equals(a: AbortGame | PlainMessage<AbortGame> | undefined, b: AbortGame | PlainMessage<AbortGame> | undefined): boolean {
    return proto3.util.equals(AbortGame, a, b);
  }
}

/**
 * @generated from message pb.OfferDraw
 */
export class OfferDraw extends Message$1<OfferDraw> {
  constructor(data?: PartialMessage<OfferDraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.OfferDraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OfferDraw {
    return new OfferDraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OfferDraw {
    return new OfferDraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OfferDraw {
    return new OfferDraw().fromJsonString(jsonString, options);
  }

  static equals(a: OfferDraw | PlainMessage<OfferDraw> | undefined, b: OfferDraw | PlainMessage<OfferDraw> | undefined): boolean {
    return proto3.util.equals(OfferDraw, a, b);
  }
}

/**
 * @generated from message pb.AcceptDraw
 */
export class AcceptDraw extends Message$1<AcceptDraw> {
  constructor(data?: PartialMessage<AcceptDraw>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.AcceptDraw";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AcceptDraw {
    return new AcceptDraw().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AcceptDraw {
    return new AcceptDraw().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AcceptDraw {
    return new AcceptDraw().fromJsonString(jsonString, options);
  }

  static equals(a: AcceptDraw | PlainMessage<AcceptDraw> | undefined, b: AcceptDraw | PlainMessage<AcceptDraw> | undefined): boolean {
    return proto3.util.equals(AcceptDraw, a, b);
  }
}

/**
 * @generated from message pb.PlayMoveUCI
 */
export class PlayMoveUCI extends Message$1<PlayMoveUCI> {
  /**
   * @generated from field: string move = 1;
   */
  move = "";

  constructor(data?: PartialMessage<PlayMoveUCI>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.PlayMoveUCI";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "move", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PlayMoveUCI {
    return new PlayMoveUCI().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PlayMoveUCI {
    return new PlayMoveUCI().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PlayMoveUCI {
    return new PlayMoveUCI().fromJsonString(jsonString, options);
  }

  static equals(a: PlayMoveUCI | PlainMessage<PlayMoveUCI> | undefined, b: PlayMoveUCI | PlainMessage<PlayMoveUCI> | undefined): boolean {
    return proto3.util.equals(PlayMoveUCI, a, b);
  }
}

/**
 * @generated from message pb.Chat
 */
export class Chat extends Message$1<Chat> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<Chat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Chat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chat {
    return new Chat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chat {
    return new Chat().fromJsonString(jsonString, options);
  }

  static equals(a: Chat | PlainMessage<Chat> | undefined, b: Chat | PlainMessage<Chat> | undefined): boolean {
    return proto3.util.equals(Chat, a, b);
  }
}

/**
 * @generated from message pb.Clocks
 */
export class Clocks extends Message$1<Clocks> {
  /**
   * @generated from field: double white = 1;
   */
  white = 0;

  /**
   * @generated from field: double black = 2;
   */
  black = 0;

  constructor(data?: PartialMessage<Clocks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Clocks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "white", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "black", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Clocks {
    return new Clocks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Clocks {
    return new Clocks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Clocks {
    return new Clocks().fromJsonString(jsonString, options);
  }

  static equals(a: Clocks | PlainMessage<Clocks> | undefined, b: Clocks | PlainMessage<Clocks> | undefined): boolean {
    return proto3.util.equals(Clocks, a, b);
  }
}

/**
 * @generated from message pb.Move
 */
export class Move extends Message$1<Move> {
  /**
   * @generated from field: string uci = 1;
   */
  uci = "";

  /**
   * @generated from field: string san = 2;
   */
  san = "";

  /**
   * @generated from field: string lan = 3;
   */
  lan = "";

  /**
   * @generated from field: string fen = 4;
   */
  fen = "";

  /**
   * @generated from field: uint32 ply = 5;
   */
  ply = 0;

  /**
   * @generated from field: pb.Clocks clocks = 6;
   */
  clocks?: Clocks;

  /**
   * @generated from field: repeated string legal_moves = 7;
   */
  legalMoves: string[] = [];

  constructor(data?: PartialMessage<Move>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "pb.Move";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uci", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "san", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "fen", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "ply", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "clocks", kind: "message", T: Clocks },
    { no: 7, name: "legal_moves", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Move {
    return new Move().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Move {
    return new Move().fromJsonString(jsonString, options);
  }

  static equals(a: Move | PlainMessage<Move> | undefined, b: Move | PlainMessage<Move> | undefined): boolean {
    return proto3.util.equals(Move, a, b);
  }
}

