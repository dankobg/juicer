/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Division sections are used for interactive widgets that require a hook in the DOM / view.
 * @export
 * @interface UiNodeDivisionAttributes
 */
export interface UiNodeDivisionAttributes {
    /**
     * The script MIME type
     * @type {string}
     * @memberof UiNodeDivisionAttributes
     */
    _class?: string;
    /**
     * Data is a map of key-value pairs that are passed to the division.
     * 
     * They may be used for `data-...` attributes.
     * @type {{ [key: string]: string; }}
     * @memberof UiNodeDivisionAttributes
     */
    data?: { [key: string]: string; };
    /**
     * A unique identifier
     * @type {string}
     * @memberof UiNodeDivisionAttributes
     */
    id: string;
    /**
     * NodeType represents this node's types. It is a mirror of `node.type` and
     * is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
     * text Text
     * input Input
     * img Image
     * a Anchor
     * script Script
     * div Division
     * @type {string}
     * @memberof UiNodeDivisionAttributes
     */
    nodeType: UiNodeDivisionAttributesNodeTypeEnum;
}


/**
 * @export
 */
export const UiNodeDivisionAttributesNodeTypeEnum = {
    Text: 'text',
    Input: 'input',
    Img: 'img',
    A: 'a',
    Script: 'script',
    Div: 'div'
} as const;
export type UiNodeDivisionAttributesNodeTypeEnum = typeof UiNodeDivisionAttributesNodeTypeEnum[keyof typeof UiNodeDivisionAttributesNodeTypeEnum];


/**
 * Check if a given object implements the UiNodeDivisionAttributes interface.
 */
export function instanceOfUiNodeDivisionAttributes(value: object): value is UiNodeDivisionAttributes {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('nodeType' in value) || value['nodeType'] === undefined) return false;
    return true;
}

export function UiNodeDivisionAttributesFromJSON(json: any): UiNodeDivisionAttributes {
    return UiNodeDivisionAttributesFromJSONTyped(json, false);
}

export function UiNodeDivisionAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiNodeDivisionAttributes {
    if (json == null) {
        return json;
    }
    return {
        
        '_class': json['class'] == null ? undefined : json['class'],
        'data': json['data'] == null ? undefined : json['data'],
        'id': json['id'],
        'nodeType': json['node_type'],
    };
}

export function UiNodeDivisionAttributesToJSON(json: any): UiNodeDivisionAttributes {
    return UiNodeDivisionAttributesToJSONTyped(json, false);
}

export function UiNodeDivisionAttributesToJSONTyped(value?: UiNodeDivisionAttributes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'class': value['_class'],
        'data': value['data'],
        'id': value['id'],
        'node_type': value['nodeType'],
    };
}

