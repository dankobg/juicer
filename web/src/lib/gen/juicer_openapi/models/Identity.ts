/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VerifiableIdentityAddress } from './VerifiableIdentityAddress';
import {
    VerifiableIdentityAddressFromJSON,
    VerifiableIdentityAddressFromJSONTyped,
    VerifiableIdentityAddressToJSON,
    VerifiableIdentityAddressToJSONTyped,
} from './VerifiableIdentityAddress';
import type { RecoveryIdentityAddress } from './RecoveryIdentityAddress';
import {
    RecoveryIdentityAddressFromJSON,
    RecoveryIdentityAddressFromJSONTyped,
    RecoveryIdentityAddressToJSON,
    RecoveryIdentityAddressToJSONTyped,
} from './RecoveryIdentityAddress';
import type { IdentityCredentials } from './IdentityCredentials';
import {
    IdentityCredentialsFromJSON,
    IdentityCredentialsFromJSONTyped,
    IdentityCredentialsToJSON,
    IdentityCredentialsToJSONTyped,
} from './IdentityCredentials';

/**
 * An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
 * @export
 * @interface Identity
 */
export interface Identity {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Identity
     */
    createdAt?: Date;
    /**
     * Credentials represents all credentials that can be used for authenticating this identity.
     * @type {{ [key: string]: IdentityCredentials; }}
     * @memberof Identity
     */
    credentials?: { [key: string]: IdentityCredentials; };
    /**
     * ID is the identity's unique identifier.
     * 
     * The Identity ID can not be changed and can not be chosen. This ensures future
     * compatibility and optimization for distributed stores such as CockroachDB.
     * @type {string}
     * @memberof Identity
     */
    id: string;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    metadataAdmin?: object | null;
    /**
     * NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
     * @type {object}
     * @memberof Identity
     */
    metadataPublic?: object | null;
    /**
     * 
     * @type {string}
     * @memberof Identity
     */
    organizationId?: string | null;
    /**
     * RecoveryAddresses contains all the addresses that can be used to recover an identity.
     * @type {Array<RecoveryIdentityAddress>}
     * @memberof Identity
     */
    recoveryAddresses?: Array<RecoveryIdentityAddress>;
    /**
     * SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
     * @type {string}
     * @memberof Identity
     */
    schemaId: string;
    /**
     * SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.
     * 
     * format: url
     * @type {string}
     * @memberof Identity
     */
    schemaUrl: string;
    /**
     * State is the identity's state.
     * 
     * This value has currently no effect.
     * active StateActive
     * inactive StateInactive
     * @type {string}
     * @memberof Identity
     */
    state?: IdentityStateEnum;
    /**
     * 
     * @type {Date}
     * @memberof Identity
     */
    stateChangedAt?: Date | null;
    /**
     * Traits represent an identity's traits. The identity is able to create, modify, and delete traits
     * in a self-service manner. The input will always be validated against the JSON Schema defined
     * in `schema_url`.
     * @type {any}
     * @memberof Identity
     */
    traits: any | null;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Identity
     */
    updatedAt?: Date;
    /**
     * VerifiableAddresses contains all the addresses that can be verified by the user.
     * @type {Array<VerifiableIdentityAddress>}
     * @memberof Identity
     */
    verifiableAddresses?: Array<VerifiableIdentityAddress>;
}


/**
 * @export
 */
export const IdentityStateEnum = {
    Active: 'active',
    Inactive: 'inactive'
} as const;
export type IdentityStateEnum = typeof IdentityStateEnum[keyof typeof IdentityStateEnum];


/**
 * Check if a given object implements the Identity interface.
 */
export function instanceOfIdentity(value: object): value is Identity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('schemaId' in value) || value['schemaId'] === undefined) return false;
    if (!('schemaUrl' in value) || value['schemaUrl'] === undefined) return false;
    if (!('traits' in value) || value['traits'] === undefined) return false;
    return true;
}

export function IdentityFromJSON(json: any): Identity {
    return IdentityFromJSONTyped(json, false);
}

export function IdentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Identity {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'credentials': json['credentials'] == null ? undefined : (mapValues(json['credentials'], IdentityCredentialsFromJSON)),
        'id': json['id'],
        'metadataAdmin': json['metadata_admin'] == null ? undefined : json['metadata_admin'],
        'metadataPublic': json['metadata_public'] == null ? undefined : json['metadata_public'],
        'organizationId': json['organization_id'] == null ? undefined : json['organization_id'],
        'recoveryAddresses': json['recovery_addresses'] == null ? undefined : ((json['recovery_addresses'] as Array<any>).map(RecoveryIdentityAddressFromJSON)),
        'schemaId': json['schema_id'],
        'schemaUrl': json['schema_url'],
        'state': json['state'] == null ? undefined : json['state'],
        'stateChangedAt': json['state_changed_at'] == null ? undefined : (new Date(json['state_changed_at'])),
        'traits': json['traits'],
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'verifiableAddresses': json['verifiable_addresses'] == null ? undefined : ((json['verifiable_addresses'] as Array<any>).map(VerifiableIdentityAddressFromJSON)),
    };
}

export function IdentityToJSON(json: any): Identity {
    return IdentityToJSONTyped(json, false);
}

export function IdentityToJSONTyped(value?: Identity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'credentials': value['credentials'] == null ? undefined : (mapValues(value['credentials'], IdentityCredentialsToJSON)),
        'id': value['id'],
        'metadata_admin': value['metadataAdmin'],
        'metadata_public': value['metadataPublic'],
        'organization_id': value['organizationId'],
        'recovery_addresses': value['recoveryAddresses'] == null ? undefined : ((value['recoveryAddresses'] as Array<any>).map(RecoveryIdentityAddressToJSON)),
        'schema_id': value['schemaId'],
        'schema_url': value['schemaUrl'],
        'state': value['state'],
        'state_changed_at': value['stateChangedAt'] == null ? undefined : ((value['stateChangedAt'] as any).toISOString()),
        'traits': value['traits'],
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'verifiable_addresses': value['verifiableAddresses'] == null ? undefined : ((value['verifiableAddresses'] as Array<any>).map(VerifiableIdentityAddressToJSON)),
    };
}

