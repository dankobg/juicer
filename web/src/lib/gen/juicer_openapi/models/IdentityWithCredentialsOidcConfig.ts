/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IdentityWithCredentialsOidcConfigProvider } from './IdentityWithCredentialsOidcConfigProvider';
import {
    IdentityWithCredentialsOidcConfigProviderFromJSON,
    IdentityWithCredentialsOidcConfigProviderFromJSONTyped,
    IdentityWithCredentialsOidcConfigProviderToJSON,
    IdentityWithCredentialsOidcConfigProviderToJSONTyped,
} from './IdentityWithCredentialsOidcConfigProvider';

/**
 * 
 * @export
 * @interface IdentityWithCredentialsOidcConfig
 */
export interface IdentityWithCredentialsOidcConfig {
    /**
     * A list of OpenID Connect Providers
     * @type {Array<IdentityWithCredentialsOidcConfigProvider>}
     * @memberof IdentityWithCredentialsOidcConfig
     */
    providers?: Array<IdentityWithCredentialsOidcConfigProvider>;
}

/**
 * Check if a given object implements the IdentityWithCredentialsOidcConfig interface.
 */
export function instanceOfIdentityWithCredentialsOidcConfig(value: object): value is IdentityWithCredentialsOidcConfig {
    return true;
}

export function IdentityWithCredentialsOidcConfigFromJSON(json: any): IdentityWithCredentialsOidcConfig {
    return IdentityWithCredentialsOidcConfigFromJSONTyped(json, false);
}

export function IdentityWithCredentialsOidcConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityWithCredentialsOidcConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'providers': json['providers'] == null ? undefined : ((json['providers'] as Array<any>).map(IdentityWithCredentialsOidcConfigProviderFromJSON)),
    };
}

export function IdentityWithCredentialsOidcConfigToJSON(json: any): IdentityWithCredentialsOidcConfig {
    return IdentityWithCredentialsOidcConfigToJSONTyped(json, false);
}

export function IdentityWithCredentialsOidcConfigToJSONTyped(value?: IdentityWithCredentialsOidcConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'providers': value['providers'] == null ? undefined : ((value['providers'] as Array<any>).map(IdentityWithCredentialsOidcConfigProviderToJSON)),
    };
}

