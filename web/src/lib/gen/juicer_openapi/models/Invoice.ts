/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { InvoiceDataV1 } from './InvoiceDataV1';
import {
    InvoiceDataV1FromJSON,
    InvoiceDataV1FromJSONTyped,
    InvoiceDataV1ToJSON,
    InvoiceDataV1ToJSONTyped,
} from './InvoiceDataV1';

/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The ID of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    readonly id: string;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    invoicedAt: Date;
    /**
     * Type is the type of the invoice.
     * usage InvoiceTypeUsage
     * base InvoiceTypeBase
     * @type {string}
     * @memberof Invoice
     */
    readonly type: InvoiceTypeEnum;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    updatedAt?: Date;
    /**
     * 
     * @type {InvoiceDataV1}
     * @memberof Invoice
     */
    v1?: InvoiceDataV1;
}


/**
 * @export
 */
export const InvoiceTypeEnum = {
    Usage: 'usage',
    Base: 'base'
} as const;
export type InvoiceTypeEnum = typeof InvoiceTypeEnum[keyof typeof InvoiceTypeEnum];


/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): value is Invoice {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('invoicedAt' in value) || value['invoicedAt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'invoicedAt': (new Date(json['invoiced_at'])),
        'type': json['type'],
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'v1': json['v1'] == null ? undefined : InvoiceDataV1FromJSON(json['v1']),
    };
}

export function InvoiceToJSON(json: any): Invoice {
    return InvoiceToJSONTyped(json, false);
}

export function InvoiceToJSONTyped(value?: Omit<Invoice, 'id'|'type'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'invoiced_at': ((value['invoicedAt']).toISOString()),
        'updated_at': value['updatedAt'] == null ? undefined : ((value['updatedAt']).toISOString()),
        'v1': InvoiceDataV1ToJSON(value['v1']),
    };
}

