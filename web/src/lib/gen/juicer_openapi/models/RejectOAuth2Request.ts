/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RejectOAuth2Request
 */
export interface RejectOAuth2Request {
    /**
     * The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).
     * 
     * Defaults to `request_denied`.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    error?: string;
    /**
     * Debug contains information to help resolve the problem as a developer. Usually not exposed
     * to the public but only in the server logs.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    errorDebug?: string;
    /**
     * Description of the error in a human readable format.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    errorDescription?: string;
    /**
     * Hint to help resolve the error.
     * @type {string}
     * @memberof RejectOAuth2Request
     */
    errorHint?: string;
    /**
     * Represents the HTTP status code of the error (e.g. 401 or 403)
     * 
     * Defaults to 400
     * @type {number}
     * @memberof RejectOAuth2Request
     */
    statusCode?: number;
}

/**
 * Check if a given object implements the RejectOAuth2Request interface.
 */
export function instanceOfRejectOAuth2Request(value: object): value is RejectOAuth2Request {
    return true;
}

export function RejectOAuth2RequestFromJSON(json: any): RejectOAuth2Request {
    return RejectOAuth2RequestFromJSONTyped(json, false);
}

export function RejectOAuth2RequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RejectOAuth2Request {
    if (json == null) {
        return json;
    }
    return {
        
        'error': json['error'] == null ? undefined : json['error'],
        'errorDebug': json['error_debug'] == null ? undefined : json['error_debug'],
        'errorDescription': json['error_description'] == null ? undefined : json['error_description'],
        'errorHint': json['error_hint'] == null ? undefined : json['error_hint'],
        'statusCode': json['status_code'] == null ? undefined : json['status_code'],
    };
}

export function RejectOAuth2RequestToJSON(json: any): RejectOAuth2Request {
    return RejectOAuth2RequestToJSONTyped(json, false);
}

export function RejectOAuth2RequestToJSONTyped(value?: RejectOAuth2Request | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'error': value['error'],
        'error_debug': value['errorDebug'],
        'error_description': value['errorDescription'],
        'error_hint': value['errorHint'],
        'status_code': value['statusCode'],
    };
}

