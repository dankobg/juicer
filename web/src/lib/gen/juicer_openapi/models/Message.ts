/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CourierMessageStatus } from './CourierMessageStatus';
import {
    CourierMessageStatusFromJSON,
    CourierMessageStatusFromJSONTyped,
    CourierMessageStatusToJSON,
    CourierMessageStatusToJSONTyped,
} from './CourierMessageStatus';
import type { MessageDispatch } from './MessageDispatch';
import {
    MessageDispatchFromJSON,
    MessageDispatchFromJSONTyped,
    MessageDispatchToJSON,
    MessageDispatchToJSONTyped,
} from './MessageDispatch';
import type { CourierMessageTemplateType } from './CourierMessageTemplateType';
import {
    CourierMessageTemplateTypeFromJSON,
    CourierMessageTemplateTypeFromJSONTyped,
    CourierMessageTemplateTypeToJSON,
    CourierMessageTemplateTypeToJSONTyped,
} from './CourierMessageTemplateType';
import type { CourierMessageType } from './CourierMessageType';
import {
    CourierMessageTypeFromJSON,
    CourierMessageTypeFromJSONTyped,
    CourierMessageTypeToJSON,
    CourierMessageTypeToJSONTyped,
} from './CourierMessageType';

/**
 * 
 * @export
 * @interface Message
 */
export interface Message {
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    channel?: string;
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Message
     */
    createdAt: Date;
    /**
     * Dispatches store information about the attempts of delivering a message
     * May contain an error if any happened, or just the `success` state.
     * @type {Array<MessageDispatch>}
     * @memberof Message
     */
    dispatches?: Array<MessageDispatch>;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    recipient: string;
    /**
     * 
     * @type {number}
     * @memberof Message
     */
    sendCount: number;
    /**
     * 
     * @type {CourierMessageStatus}
     * @memberof Message
     */
    status: CourierMessageStatus;
    /**
     * 
     * @type {string}
     * @memberof Message
     */
    subject: string;
    /**
     * 
     * @type {CourierMessageTemplateType}
     * @memberof Message
     */
    templateType: CourierMessageTemplateType;
    /**
     * 
     * @type {CourierMessageType}
     * @memberof Message
     */
    type: CourierMessageType;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof Message
     */
    updatedAt: Date;
}



/**
 * Check if a given object implements the Message interface.
 */
export function instanceOfMessage(value: object): value is Message {
    if (!('body' in value) || value['body'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('recipient' in value) || value['recipient'] === undefined) return false;
    if (!('sendCount' in value) || value['sendCount'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('subject' in value) || value['subject'] === undefined) return false;
    if (!('templateType' in value) || value['templateType'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function MessageFromJSON(json: any): Message {
    return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): Message {
    if (json == null) {
        return json;
    }
    return {
        
        'body': json['body'],
        'channel': json['channel'] == null ? undefined : json['channel'],
        'createdAt': (new Date(json['created_at'])),
        'dispatches': json['dispatches'] == null ? undefined : ((json['dispatches'] as Array<any>).map(MessageDispatchFromJSON)),
        'id': json['id'],
        'recipient': json['recipient'],
        'sendCount': json['send_count'],
        'status': CourierMessageStatusFromJSON(json['status']),
        'subject': json['subject'],
        'templateType': CourierMessageTemplateTypeFromJSON(json['template_type']),
        'type': CourierMessageTypeFromJSON(json['type']),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function MessageToJSON(json: any): Message {
    return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(value?: Message | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'body': value['body'],
        'channel': value['channel'],
        'created_at': ((value['createdAt']).toISOString()),
        'dispatches': value['dispatches'] == null ? undefined : ((value['dispatches'] as Array<any>).map(MessageDispatchToJSON)),
        'id': value['id'],
        'recipient': value['recipient'],
        'send_count': value['sendCount'],
        'status': CourierMessageStatusToJSON(value['status']),
        'subject': value['subject'],
        'template_type': CourierMessageTemplateTypeToJSON(value['templateType']),
        'type': CourierMessageTypeToJSON(value['type']),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

