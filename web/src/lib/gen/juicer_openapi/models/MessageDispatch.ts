/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * MessageDispatch represents an attempt of sending a courier message
 * It contains the status of the attempt (failed or successful) and the error if any occured
 * @export
 * @interface MessageDispatch
 */
export interface MessageDispatch {
    /**
     * CreatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof MessageDispatch
     */
    createdAt: Date;
    /**
     * 
     * @type {object}
     * @memberof MessageDispatch
     */
    error?: object;
    /**
     * The ID of this message dispatch
     * @type {string}
     * @memberof MessageDispatch
     */
    id: string;
    /**
     * The ID of the message being dispatched
     * @type {string}
     * @memberof MessageDispatch
     */
    messageId: string;
    /**
     * The status of this dispatch
     * Either "failed" or "success"
     * failed CourierMessageDispatchStatusFailed
     * success CourierMessageDispatchStatusSuccess
     * @type {string}
     * @memberof MessageDispatch
     */
    status: MessageDispatchStatusEnum;
    /**
     * UpdatedAt is a helper struct field for gobuffalo.pop.
     * @type {Date}
     * @memberof MessageDispatch
     */
    updatedAt: Date;
}


/**
 * @export
 */
export const MessageDispatchStatusEnum = {
    Failed: 'failed',
    Success: 'success'
} as const;
export type MessageDispatchStatusEnum = typeof MessageDispatchStatusEnum[keyof typeof MessageDispatchStatusEnum];


/**
 * Check if a given object implements the MessageDispatch interface.
 */
export function instanceOfMessageDispatch(value: object): value is MessageDispatch {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('messageId' in value) || value['messageId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function MessageDispatchFromJSON(json: any): MessageDispatch {
    return MessageDispatchFromJSONTyped(json, false);
}

export function MessageDispatchFromJSONTyped(json: any, ignoreDiscriminator: boolean): MessageDispatch {
    if (json == null) {
        return json;
    }
    return {
        
        'createdAt': (new Date(json['created_at'])),
        'error': json['error'] == null ? undefined : json['error'],
        'id': json['id'],
        'messageId': json['message_id'],
        'status': json['status'],
        'updatedAt': (new Date(json['updated_at'])),
    };
}

export function MessageDispatchToJSON(json: any): MessageDispatch {
    return MessageDispatchToJSONTyped(json, false);
}

export function MessageDispatchToJSONTyped(value?: MessageDispatch | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'created_at': ((value['createdAt']).toISOString()),
        'error': value['error'],
        'id': value['id'],
        'message_id': value['messageId'],
        'status': value['status'],
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

