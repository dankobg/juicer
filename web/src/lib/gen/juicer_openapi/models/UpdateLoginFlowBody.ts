/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { UpdateLoginFlowWithCodeMethod } from './UpdateLoginFlowWithCodeMethod';
import {
    instanceOfUpdateLoginFlowWithCodeMethod,
    UpdateLoginFlowWithCodeMethodFromJSON,
    UpdateLoginFlowWithCodeMethodFromJSONTyped,
    UpdateLoginFlowWithCodeMethodToJSON,
} from './UpdateLoginFlowWithCodeMethod';
import type { UpdateLoginFlowWithIdentifierFirstMethod } from './UpdateLoginFlowWithIdentifierFirstMethod';
import {
    instanceOfUpdateLoginFlowWithIdentifierFirstMethod,
    UpdateLoginFlowWithIdentifierFirstMethodFromJSON,
    UpdateLoginFlowWithIdentifierFirstMethodFromJSONTyped,
    UpdateLoginFlowWithIdentifierFirstMethodToJSON,
} from './UpdateLoginFlowWithIdentifierFirstMethod';
import type { UpdateLoginFlowWithLookupSecretMethod } from './UpdateLoginFlowWithLookupSecretMethod';
import {
    instanceOfUpdateLoginFlowWithLookupSecretMethod,
    UpdateLoginFlowWithLookupSecretMethodFromJSON,
    UpdateLoginFlowWithLookupSecretMethodFromJSONTyped,
    UpdateLoginFlowWithLookupSecretMethodToJSON,
} from './UpdateLoginFlowWithLookupSecretMethod';
import type { UpdateLoginFlowWithOidcMethod } from './UpdateLoginFlowWithOidcMethod';
import {
    instanceOfUpdateLoginFlowWithOidcMethod,
    UpdateLoginFlowWithOidcMethodFromJSON,
    UpdateLoginFlowWithOidcMethodFromJSONTyped,
    UpdateLoginFlowWithOidcMethodToJSON,
} from './UpdateLoginFlowWithOidcMethod';
import type { UpdateLoginFlowWithPasskeyMethod } from './UpdateLoginFlowWithPasskeyMethod';
import {
    instanceOfUpdateLoginFlowWithPasskeyMethod,
    UpdateLoginFlowWithPasskeyMethodFromJSON,
    UpdateLoginFlowWithPasskeyMethodFromJSONTyped,
    UpdateLoginFlowWithPasskeyMethodToJSON,
} from './UpdateLoginFlowWithPasskeyMethod';
import type { UpdateLoginFlowWithPasswordMethod } from './UpdateLoginFlowWithPasswordMethod';
import {
    instanceOfUpdateLoginFlowWithPasswordMethod,
    UpdateLoginFlowWithPasswordMethodFromJSON,
    UpdateLoginFlowWithPasswordMethodFromJSONTyped,
    UpdateLoginFlowWithPasswordMethodToJSON,
} from './UpdateLoginFlowWithPasswordMethod';
import type { UpdateLoginFlowWithSamlMethod } from './UpdateLoginFlowWithSamlMethod';
import {
    instanceOfUpdateLoginFlowWithSamlMethod,
    UpdateLoginFlowWithSamlMethodFromJSON,
    UpdateLoginFlowWithSamlMethodFromJSONTyped,
    UpdateLoginFlowWithSamlMethodToJSON,
} from './UpdateLoginFlowWithSamlMethod';
import type { UpdateLoginFlowWithTotpMethod } from './UpdateLoginFlowWithTotpMethod';
import {
    instanceOfUpdateLoginFlowWithTotpMethod,
    UpdateLoginFlowWithTotpMethodFromJSON,
    UpdateLoginFlowWithTotpMethodFromJSONTyped,
    UpdateLoginFlowWithTotpMethodToJSON,
} from './UpdateLoginFlowWithTotpMethod';
import type { UpdateLoginFlowWithWebAuthnMethod } from './UpdateLoginFlowWithWebAuthnMethod';
import {
    instanceOfUpdateLoginFlowWithWebAuthnMethod,
    UpdateLoginFlowWithWebAuthnMethodFromJSON,
    UpdateLoginFlowWithWebAuthnMethodFromJSONTyped,
    UpdateLoginFlowWithWebAuthnMethodToJSON,
} from './UpdateLoginFlowWithWebAuthnMethod';

/**
 * @type UpdateLoginFlowBody
 * 
 * @export
 */
export type UpdateLoginFlowBody = { method: 'code' } & UpdateLoginFlowWithCodeMethod | { method: 'identifier_first' } & UpdateLoginFlowWithIdentifierFirstMethod | { method: 'lookup_secret' } & UpdateLoginFlowWithLookupSecretMethod | { method: 'oidc' } & UpdateLoginFlowWithOidcMethod | { method: 'passkey' } & UpdateLoginFlowWithPasskeyMethod | { method: 'password' } & UpdateLoginFlowWithPasswordMethod | { method: 'saml' } & UpdateLoginFlowWithSamlMethod | { method: 'totp' } & UpdateLoginFlowWithTotpMethod | { method: 'webauthn' } & UpdateLoginFlowWithWebAuthnMethod;

export function UpdateLoginFlowBodyFromJSON(json: any): UpdateLoginFlowBody {
    return UpdateLoginFlowBodyFromJSONTyped(json, false);
}

export function UpdateLoginFlowBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateLoginFlowBody {
    if (json == null) {
        return json;
    }
    switch (json['method']) {
        case 'code':
            return Object.assign({}, UpdateLoginFlowWithCodeMethodFromJSONTyped(json, true), { method: 'code' } as const);
        case 'identifier_first':
            return Object.assign({}, UpdateLoginFlowWithIdentifierFirstMethodFromJSONTyped(json, true), { method: 'identifier_first' } as const);
        case 'lookup_secret':
            return Object.assign({}, UpdateLoginFlowWithLookupSecretMethodFromJSONTyped(json, true), { method: 'lookup_secret' } as const);
        case 'oidc':
            return Object.assign({}, UpdateLoginFlowWithOidcMethodFromJSONTyped(json, true), { method: 'oidc' } as const);
        case 'passkey':
            return Object.assign({}, UpdateLoginFlowWithPasskeyMethodFromJSONTyped(json, true), { method: 'passkey' } as const);
        case 'password':
            return Object.assign({}, UpdateLoginFlowWithPasswordMethodFromJSONTyped(json, true), { method: 'password' } as const);
        case 'saml':
            return Object.assign({}, UpdateLoginFlowWithSamlMethodFromJSONTyped(json, true), { method: 'saml' } as const);
        case 'totp':
            return Object.assign({}, UpdateLoginFlowWithTotpMethodFromJSONTyped(json, true), { method: 'totp' } as const);
        case 'webauthn':
            return Object.assign({}, UpdateLoginFlowWithWebAuthnMethodFromJSONTyped(json, true), { method: 'webauthn' } as const);
        default:
            throw new Error(`No variant of UpdateLoginFlowBody exists with 'method=${json['method']}'`);
    }
}

export function UpdateLoginFlowBodyToJSON(json: any): any {
    return UpdateLoginFlowBodyToJSONTyped(json, false);
}

export function UpdateLoginFlowBodyToJSONTyped(value?: UpdateLoginFlowBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['method']) {
        case 'code':
            return Object.assign({}, UpdateLoginFlowWithCodeMethodToJSON(value), { method: 'code' } as const);
        case 'identifier_first':
            return Object.assign({}, UpdateLoginFlowWithIdentifierFirstMethodToJSON(value), { method: 'identifier_first' } as const);
        case 'lookup_secret':
            return Object.assign({}, UpdateLoginFlowWithLookupSecretMethodToJSON(value), { method: 'lookup_secret' } as const);
        case 'oidc':
            return Object.assign({}, UpdateLoginFlowWithOidcMethodToJSON(value), { method: 'oidc' } as const);
        case 'passkey':
            return Object.assign({}, UpdateLoginFlowWithPasskeyMethodToJSON(value), { method: 'passkey' } as const);
        case 'password':
            return Object.assign({}, UpdateLoginFlowWithPasswordMethodToJSON(value), { method: 'password' } as const);
        case 'saml':
            return Object.assign({}, UpdateLoginFlowWithSamlMethodToJSON(value), { method: 'saml' } as const);
        case 'totp':
            return Object.assign({}, UpdateLoginFlowWithTotpMethodToJSON(value), { method: 'totp' } as const);
        case 'webauthn':
            return Object.assign({}, UpdateLoginFlowWithWebAuthnMethodToJSON(value), { method: 'webauthn' } as const);
        default:
            throw new Error(`No variant of UpdateLoginFlowBody exists with 'method=${value['method']}'`);
    }

}

