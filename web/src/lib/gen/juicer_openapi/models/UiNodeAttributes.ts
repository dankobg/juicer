/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { UiNodeAnchorAttributes } from './UiNodeAnchorAttributes';
import {
    instanceOfUiNodeAnchorAttributes,
    UiNodeAnchorAttributesFromJSON,
    UiNodeAnchorAttributesFromJSONTyped,
    UiNodeAnchorAttributesToJSON,
} from './UiNodeAnchorAttributes';
import type { UiNodeDivisionAttributes } from './UiNodeDivisionAttributes';
import {
    instanceOfUiNodeDivisionAttributes,
    UiNodeDivisionAttributesFromJSON,
    UiNodeDivisionAttributesFromJSONTyped,
    UiNodeDivisionAttributesToJSON,
} from './UiNodeDivisionAttributes';
import type { UiNodeImageAttributes } from './UiNodeImageAttributes';
import {
    instanceOfUiNodeImageAttributes,
    UiNodeImageAttributesFromJSON,
    UiNodeImageAttributesFromJSONTyped,
    UiNodeImageAttributesToJSON,
} from './UiNodeImageAttributes';
import type { UiNodeInputAttributes } from './UiNodeInputAttributes';
import {
    instanceOfUiNodeInputAttributes,
    UiNodeInputAttributesFromJSON,
    UiNodeInputAttributesFromJSONTyped,
    UiNodeInputAttributesToJSON,
} from './UiNodeInputAttributes';
import type { UiNodeScriptAttributes } from './UiNodeScriptAttributes';
import {
    instanceOfUiNodeScriptAttributes,
    UiNodeScriptAttributesFromJSON,
    UiNodeScriptAttributesFromJSONTyped,
    UiNodeScriptAttributesToJSON,
} from './UiNodeScriptAttributes';
import type { UiNodeTextAttributes } from './UiNodeTextAttributes';
import {
    instanceOfUiNodeTextAttributes,
    UiNodeTextAttributesFromJSON,
    UiNodeTextAttributesFromJSONTyped,
    UiNodeTextAttributesToJSON,
} from './UiNodeTextAttributes';

/**
 * @type UiNodeAttributes
 * 
 * @export
 */
export type UiNodeAttributes = { nodeType: 'a' } & UiNodeAnchorAttributes | { nodeType: 'div' } & UiNodeDivisionAttributes | { nodeType: 'img' } & UiNodeImageAttributes | { nodeType: 'input' } & UiNodeInputAttributes | { nodeType: 'script' } & UiNodeScriptAttributes | { nodeType: 'text' } & UiNodeTextAttributes;

export function UiNodeAttributesFromJSON(json: any): UiNodeAttributes {
    return UiNodeAttributesFromJSONTyped(json, false);
}

export function UiNodeAttributesFromJSONTyped(json: any, ignoreDiscriminator: boolean): UiNodeAttributes {
    if (json == null) {
        return json;
    }
    switch (json['node_type']) {
        case 'a':
            return Object.assign({}, UiNodeAnchorAttributesFromJSONTyped(json, true), { nodeType: 'a' } as const);
        case 'div':
            return Object.assign({}, UiNodeDivisionAttributesFromJSONTyped(json, true), { nodeType: 'div' } as const);
        case 'img':
            return Object.assign({}, UiNodeImageAttributesFromJSONTyped(json, true), { nodeType: 'img' } as const);
        case 'input':
            return Object.assign({}, UiNodeInputAttributesFromJSONTyped(json, true), { nodeType: 'input' } as const);
        case 'script':
            return Object.assign({}, UiNodeScriptAttributesFromJSONTyped(json, true), { nodeType: 'script' } as const);
        case 'text':
            return Object.assign({}, UiNodeTextAttributesFromJSONTyped(json, true), { nodeType: 'text' } as const);
        default:
            throw new Error(`No variant of UiNodeAttributes exists with 'nodeType=${json['nodeType']}'`);
    }
}

export function UiNodeAttributesToJSON(json: any): any {
    return UiNodeAttributesToJSONTyped(json, false);
}

export function UiNodeAttributesToJSONTyped(value?: UiNodeAttributes | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['nodeType']) {
        case 'a':
            return Object.assign({}, UiNodeAnchorAttributesToJSON(value), { nodeType: 'a' } as const);
        case 'div':
            return Object.assign({}, UiNodeDivisionAttributesToJSON(value), { nodeType: 'div' } as const);
        case 'img':
            return Object.assign({}, UiNodeImageAttributesToJSON(value), { nodeType: 'img' } as const);
        case 'input':
            return Object.assign({}, UiNodeInputAttributesToJSON(value), { nodeType: 'input' } as const);
        case 'script':
            return Object.assign({}, UiNodeScriptAttributesToJSON(value), { nodeType: 'script' } as const);
        case 'text':
            return Object.assign({}, UiNodeTextAttributesToJSON(value), { nodeType: 'text' } as const);
        default:
            throw new Error(`No variant of UiNodeAttributes exists with 'nodeType=${value['nodeType']}'`);
    }

}

