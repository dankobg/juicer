/* tslint:disable */
/* eslint-disable */
/**
 * Juicer schema
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Create Identity and Import Social Sign In Credentials Configuration
 * @export
 * @interface IdentityWithCredentialsOidcConfigProvider
 */
export interface IdentityWithCredentialsOidcConfigProvider {
    /**
     * 
     * @type {string}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    organization?: string | null;
    /**
     * The OpenID Connect provider to link the subject to. Usually something like `google` or `github`.
     * @type {string}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    provider: string;
    /**
     * The subject (`sub`) of the OpenID Connect connection. Usually the `sub` field of the ID Token.
     * @type {string}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    subject: string;
    /**
     * If set, this credential allows the user to sign in using the OpenID Connect provider without setting the subject first.
     * @type {boolean}
     * @memberof IdentityWithCredentialsOidcConfigProvider
     */
    useAutoLink?: boolean;
}

/**
 * Check if a given object implements the IdentityWithCredentialsOidcConfigProvider interface.
 */
export function instanceOfIdentityWithCredentialsOidcConfigProvider(value: object): value is IdentityWithCredentialsOidcConfigProvider {
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('subject' in value) || value['subject'] === undefined) return false;
    return true;
}

export function IdentityWithCredentialsOidcConfigProviderFromJSON(json: any): IdentityWithCredentialsOidcConfigProvider {
    return IdentityWithCredentialsOidcConfigProviderFromJSONTyped(json, false);
}

export function IdentityWithCredentialsOidcConfigProviderFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentityWithCredentialsOidcConfigProvider {
    if (json == null) {
        return json;
    }
    return {
        
        'organization': json['organization'] == null ? undefined : json['organization'],
        'provider': json['provider'],
        'subject': json['subject'],
        'useAutoLink': json['use_auto_link'] == null ? undefined : json['use_auto_link'],
    };
}

export function IdentityWithCredentialsOidcConfigProviderToJSON(json: any): IdentityWithCredentialsOidcConfigProvider {
    return IdentityWithCredentialsOidcConfigProviderToJSONTyped(json, false);
}

export function IdentityWithCredentialsOidcConfigProviderToJSONTyped(value?: IdentityWithCredentialsOidcConfigProvider | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'organization': value['organization'],
        'provider': value['provider'],
        'subject': value['subject'],
        'use_auto_link': value['useAutoLink'],
    };
}

