// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version 2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AuthenticatorAssuranceLevel.
const (
	Aal0 AuthenticatorAssuranceLevel = "aal0"
	Aal1 AuthenticatorAssuranceLevel = "aal1"
	Aal2 AuthenticatorAssuranceLevel = "aal2"
	Aal3 AuthenticatorAssuranceLevel = "aal3"
)

// Defines values for ContinueWithRecoveryUIAction.
const (
	ShowRecoveryUI ContinueWithRecoveryUIAction = "show_recovery_ui"
)

// Defines values for ContinueWithRedirectBrowserToAction.
const (
	RedirectBrowserTo ContinueWithRedirectBrowserToAction = "redirect_browser_to"
)

// Defines values for ContinueWithSetOrySessionTokenAction.
const (
	SetOrySessionToken ContinueWithSetOrySessionTokenAction = "set_ory_session_token"
)

// Defines values for ContinueWithSettingsUIAction.
const (
	ShowSettingsUI ContinueWithSettingsUIAction = "show_settings_ui"
)

// Defines values for ContinueWithVerificationUIAction.
const (
	ShowVerificationUI ContinueWithVerificationUIAction = "show_verification_ui"
)

// Defines values for CourierMessageStatus.
const (
	Abandoned  CourierMessageStatus = "abandoned"
	Processing CourierMessageStatus = "processing"
	Queued     CourierMessageStatus = "queued"
	Sent       CourierMessageStatus = "sent"
)

// Defines values for CourierMessageTemplateType.
const (
	LoginCodeValid          CourierMessageTemplateType = "login_code_valid"
	RecoveryCodeInvalid     CourierMessageTemplateType = "recovery_code_invalid"
	RecoveryCodeValid       CourierMessageTemplateType = "recovery_code_valid"
	RecoveryInvalid         CourierMessageTemplateType = "recovery_invalid"
	RecoveryValid           CourierMessageTemplateType = "recovery_valid"
	RegistrationCodeValid   CourierMessageTemplateType = "registration_code_valid"
	Stub                    CourierMessageTemplateType = "stub"
	VerificationCodeInvalid CourierMessageTemplateType = "verification_code_invalid"
	VerificationCodeValid   CourierMessageTemplateType = "verification_code_valid"
	VerificationInvalid     CourierMessageTemplateType = "verification_invalid"
	VerificationValid       CourierMessageTemplateType = "verification_valid"
)

// Defines values for CourierMessageType.
const (
	CourierMessageTypeEmail CourierMessageType = "email"
	CourierMessageTypePhone CourierMessageType = "phone"
)

// Defines values for CreateIdentityBodyState.
const (
	CreateIdentityBodyStateActive   CreateIdentityBodyState = "active"
	CreateIdentityBodyStateInactive CreateIdentityBodyState = "inactive"
)

// Defines values for ExpandedPermissionTreeType.
const (
	ComputedSubjectSet ExpandedPermissionTreeType = "computed_subject_set"
	Exclusion          ExpandedPermissionTreeType = "exclusion"
	Intersection       ExpandedPermissionTreeType = "intersection"
	Leaf               ExpandedPermissionTreeType = "leaf"
	Not                ExpandedPermissionTreeType = "not"
	TupleToSubjectSet  ExpandedPermissionTreeType = "tuple_to_subject_set"
	Union              ExpandedPermissionTreeType = "union"
	Unspecified        ExpandedPermissionTreeType = "unspecified"
)

// Defines values for IdentityState.
const (
	IdentityStateActive   IdentityState = "active"
	IdentityStateInactive IdentityState = "inactive"
)

// Defines values for IdentityCredentialsType.
const (
	IdentityCredentialsTypeCode         IdentityCredentialsType = "code"
	IdentityCredentialsTypeCodeRecovery IdentityCredentialsType = "code_recovery"
	IdentityCredentialsTypeLinkRecovery IdentityCredentialsType = "link_recovery"
	IdentityCredentialsTypeLookupSecret IdentityCredentialsType = "lookup_secret"
	IdentityCredentialsTypeOidc         IdentityCredentialsType = "oidc"
	IdentityCredentialsTypePasskey      IdentityCredentialsType = "passkey"
	IdentityCredentialsTypePassword     IdentityCredentialsType = "password"
	IdentityCredentialsTypeProfile      IdentityCredentialsType = "profile"
	IdentityCredentialsTypeSaml         IdentityCredentialsType = "saml"
	IdentityCredentialsTypeTotp         IdentityCredentialsType = "totp"
	IdentityCredentialsTypeWebauthn     IdentityCredentialsType = "webauthn"
)

// Defines values for IdentityPatchResponseAction.
const (
	IdentityPatchResponseActionCreate IdentityPatchResponseAction = "create"
	IdentityPatchResponseActionError  IdentityPatchResponseAction = "error"
)

// Defines values for InvoiceType.
const (
	Base  InvoiceType = "base"
	Usage InvoiceType = "usage"
)

// Defines values for JSONPatchOp.
const (
	Add     JSONPatchOp = "add"
	Copy    JSONPatchOp = "copy"
	Move    JSONPatchOp = "move"
	Remove  JSONPatchOp = "remove"
	Replace JSONPatchOp = "replace"
	Test    JSONPatchOp = "test"
)

// Defines values for MessageDispatchStatus.
const (
	Failed  MessageDispatchStatus = "failed"
	Success MessageDispatchStatus = "success"
)

// Defines values for RelationshipPatchAction.
const (
	Delete RelationshipPatchAction = "delete"
	Insert RelationshipPatchAction = "insert"
)

// Defines values for SessionAuthenticationMethodMethod.
const (
	SessionAuthenticationMethodMethodCode             SessionAuthenticationMethodMethod = "code"
	SessionAuthenticationMethodMethodCodeRecovery     SessionAuthenticationMethodMethod = "code_recovery"
	SessionAuthenticationMethodMethodLinkRecovery     SessionAuthenticationMethodMethod = "link_recovery"
	SessionAuthenticationMethodMethodLookupSecret     SessionAuthenticationMethodMethod = "lookup_secret"
	SessionAuthenticationMethodMethodOidc             SessionAuthenticationMethodMethod = "oidc"
	SessionAuthenticationMethodMethodPassword         SessionAuthenticationMethodMethod = "password"
	SessionAuthenticationMethodMethodTotp             SessionAuthenticationMethodMethod = "totp"
	SessionAuthenticationMethodMethodV06LegacySession SessionAuthenticationMethodMethod = "v0.6_legacy_session"
	SessionAuthenticationMethodMethodWebauthn         SessionAuthenticationMethodMethod = "webauthn"
)

// Defines values for UINodeGroup.
const (
	UINodeGroupCaptcha         UINodeGroup = "captcha"
	UINodeGroupCode            UINodeGroup = "code"
	UINodeGroupDefault         UINodeGroup = "default"
	UINodeGroupIdentifierFirst UINodeGroup = "identifier_first"
	UINodeGroupLink            UINodeGroup = "link"
	UINodeGroupLookupSecret    UINodeGroup = "lookup_secret"
	UINodeGroupOauth2Consent   UINodeGroup = "oauth2_consent"
	UINodeGroupOidc            UINodeGroup = "oidc"
	UINodeGroupPasskey         UINodeGroup = "passkey"
	UINodeGroupPassword        UINodeGroup = "password"
	UINodeGroupProfile         UINodeGroup = "profile"
	UINodeGroupSaml            UINodeGroup = "saml"
	UINodeGroupTotp            UINodeGroup = "totp"
	UINodeGroupWebauthn        UINodeGroup = "webauthn"
)

// Defines values for UINodeType.
const (
	UINodeTypeA      UINodeType = "a"
	UINodeTypeDiv    UINodeType = "div"
	UINodeTypeImg    UINodeType = "img"
	UINodeTypeInput  UINodeType = "input"
	UINodeTypeScript UINodeType = "script"
	UINodeTypeText   UINodeType = "text"
)

// Defines values for UINodeAnchorAttributesNodeType.
const (
	UINodeAnchorAttributesNodeTypeA      UINodeAnchorAttributesNodeType = "a"
	UINodeAnchorAttributesNodeTypeDiv    UINodeAnchorAttributesNodeType = "div"
	UINodeAnchorAttributesNodeTypeImg    UINodeAnchorAttributesNodeType = "img"
	UINodeAnchorAttributesNodeTypeInput  UINodeAnchorAttributesNodeType = "input"
	UINodeAnchorAttributesNodeTypeScript UINodeAnchorAttributesNodeType = "script"
	UINodeAnchorAttributesNodeTypeText   UINodeAnchorAttributesNodeType = "text"
)

// Defines values for UINodeDivisionAttributesNodeType.
const (
	UINodeDivisionAttributesNodeTypeA      UINodeDivisionAttributesNodeType = "a"
	UINodeDivisionAttributesNodeTypeDiv    UINodeDivisionAttributesNodeType = "div"
	UINodeDivisionAttributesNodeTypeImg    UINodeDivisionAttributesNodeType = "img"
	UINodeDivisionAttributesNodeTypeInput  UINodeDivisionAttributesNodeType = "input"
	UINodeDivisionAttributesNodeTypeScript UINodeDivisionAttributesNodeType = "script"
	UINodeDivisionAttributesNodeTypeText   UINodeDivisionAttributesNodeType = "text"
)

// Defines values for UINodeImageAttributesNodeType.
const (
	UINodeImageAttributesNodeTypeA      UINodeImageAttributesNodeType = "a"
	UINodeImageAttributesNodeTypeDiv    UINodeImageAttributesNodeType = "div"
	UINodeImageAttributesNodeTypeImg    UINodeImageAttributesNodeType = "img"
	UINodeImageAttributesNodeTypeInput  UINodeImageAttributesNodeType = "input"
	UINodeImageAttributesNodeTypeScript UINodeImageAttributesNodeType = "script"
	UINodeImageAttributesNodeTypeText   UINodeImageAttributesNodeType = "text"
)

// Defines values for UINodeInputAttributesAutocomplete.
const (
	UINodeInputAttributesAutocompleteCurrentPassword UINodeInputAttributesAutocomplete = "current-password"
	UINodeInputAttributesAutocompleteEmail           UINodeInputAttributesAutocomplete = "email"
	UINodeInputAttributesAutocompleteNewPassword     UINodeInputAttributesAutocomplete = "new-password"
	UINodeInputAttributesAutocompleteOneTimeCode     UINodeInputAttributesAutocomplete = "one-time-code"
	UINodeInputAttributesAutocompleteTel             UINodeInputAttributesAutocomplete = "tel"
	UINodeInputAttributesAutocompleteURL             UINodeInputAttributesAutocomplete = "url"
)

// Defines values for UINodeInputAttributesNodeType.
const (
	UINodeInputAttributesNodeTypeA      UINodeInputAttributesNodeType = "a"
	UINodeInputAttributesNodeTypeDiv    UINodeInputAttributesNodeType = "div"
	UINodeInputAttributesNodeTypeImg    UINodeInputAttributesNodeType = "img"
	UINodeInputAttributesNodeTypeInput  UINodeInputAttributesNodeType = "input"
	UINodeInputAttributesNodeTypeScript UINodeInputAttributesNodeType = "script"
	UINodeInputAttributesNodeTypeText   UINodeInputAttributesNodeType = "text"
)

// Defines values for UINodeInputAttributesOnclickTrigger.
const (
	UINodeInputAttributesOnclickTriggerOryPasskeyLogin                 UINodeInputAttributesOnclickTrigger = "oryPasskeyLogin"
	UINodeInputAttributesOnclickTriggerOryPasskeyLoginAutocompleteInit UINodeInputAttributesOnclickTrigger = "oryPasskeyLoginAutocompleteInit"
	UINodeInputAttributesOnclickTriggerOryPasskeyRegistration          UINodeInputAttributesOnclickTrigger = "oryPasskeyRegistration"
	UINodeInputAttributesOnclickTriggerOryPasskeySettingsRegistration  UINodeInputAttributesOnclickTrigger = "oryPasskeySettingsRegistration"
	UINodeInputAttributesOnclickTriggerOryWebAuthnLogin                UINodeInputAttributesOnclickTrigger = "oryWebAuthnLogin"
	UINodeInputAttributesOnclickTriggerOryWebAuthnRegistration         UINodeInputAttributesOnclickTrigger = "oryWebAuthnRegistration"
)

// Defines values for UINodeInputAttributesOnloadTrigger.
const (
	UINodeInputAttributesOnloadTriggerOryPasskeyLogin                 UINodeInputAttributesOnloadTrigger = "oryPasskeyLogin"
	UINodeInputAttributesOnloadTriggerOryPasskeyLoginAutocompleteInit UINodeInputAttributesOnloadTrigger = "oryPasskeyLoginAutocompleteInit"
	UINodeInputAttributesOnloadTriggerOryPasskeyRegistration          UINodeInputAttributesOnloadTrigger = "oryPasskeyRegistration"
	UINodeInputAttributesOnloadTriggerOryPasskeySettingsRegistration  UINodeInputAttributesOnloadTrigger = "oryPasskeySettingsRegistration"
	UINodeInputAttributesOnloadTriggerOryWebAuthnLogin                UINodeInputAttributesOnloadTrigger = "oryWebAuthnLogin"
	UINodeInputAttributesOnloadTriggerOryWebAuthnRegistration         UINodeInputAttributesOnloadTrigger = "oryWebAuthnRegistration"
)

// Defines values for UINodeInputAttributesType.
const (
	UINodeInputAttributesTypeButton        UINodeInputAttributesType = "button"
	UINodeInputAttributesTypeCheckbox      UINodeInputAttributesType = "checkbox"
	UINodeInputAttributesTypeDate          UINodeInputAttributesType = "date"
	UINodeInputAttributesTypeDatetimeLocal UINodeInputAttributesType = "datetime-local"
	UINodeInputAttributesTypeEmail         UINodeInputAttributesType = "email"
	UINodeInputAttributesTypeHidden        UINodeInputAttributesType = "hidden"
	UINodeInputAttributesTypeNumber        UINodeInputAttributesType = "number"
	UINodeInputAttributesTypePassword      UINodeInputAttributesType = "password"
	UINodeInputAttributesTypeSubmit        UINodeInputAttributesType = "submit"
	UINodeInputAttributesTypeTel           UINodeInputAttributesType = "tel"
	UINodeInputAttributesTypeText          UINodeInputAttributesType = "text"
	UINodeInputAttributesTypeURL           UINodeInputAttributesType = "url"
)

// Defines values for UINodeScriptAttributesNodeType.
const (
	UINodeScriptAttributesNodeTypeA      UINodeScriptAttributesNodeType = "a"
	UINodeScriptAttributesNodeTypeDiv    UINodeScriptAttributesNodeType = "div"
	UINodeScriptAttributesNodeTypeImg    UINodeScriptAttributesNodeType = "img"
	UINodeScriptAttributesNodeTypeInput  UINodeScriptAttributesNodeType = "input"
	UINodeScriptAttributesNodeTypeScript UINodeScriptAttributesNodeType = "script"
	UINodeScriptAttributesNodeTypeText   UINodeScriptAttributesNodeType = "text"
)

// Defines values for UINodeTextAttributesNodeType.
const (
	A      UINodeTextAttributesNodeType = "a"
	Div    UINodeTextAttributesNodeType = "div"
	Img    UINodeTextAttributesNodeType = "img"
	Input  UINodeTextAttributesNodeType = "input"
	Script UINodeTextAttributesNodeType = "script"
	Text   UINodeTextAttributesNodeType = "text"
)

// Defines values for UITextType.
const (
	UITextTypeError   UITextType = "error"
	UITextTypeInfo    UITextType = "info"
	UITextTypeSuccess UITextType = "success"
)

// Defines values for UpdateIdentityBodyState.
const (
	Active   UpdateIdentityBodyState = "active"
	Inactive UpdateIdentityBodyState = "inactive"
)

// Defines values for UpdateRegistrationFlowWithProfileMethodScreen.
const (
	CredentialSelection UpdateRegistrationFlowWithProfileMethodScreen = "credential-selection"
	Previous            UpdateRegistrationFlowWithProfileMethodScreen = "previous"
)

// Defines values for VerifiableIdentityAddressVia.
const (
	Email VerifiableIdentityAddressVia = "email"
	Sms   VerifiableIdentityAddressVia = "sms"
)

// Defines values for ListIdentitiesParamsConsistency.
const (
	Eventual ListIdentitiesParamsConsistency = "eventual"
	Strong   ListIdentitiesParamsConsistency = "strong"
)

// Defines values for GetIdentityParamsIncludeCredential.
const (
	GetIdentityParamsIncludeCredentialCode         GetIdentityParamsIncludeCredential = "code"
	GetIdentityParamsIncludeCredentialCodeRecovery GetIdentityParamsIncludeCredential = "code_recovery"
	GetIdentityParamsIncludeCredentialLinkRecovery GetIdentityParamsIncludeCredential = "link_recovery"
	GetIdentityParamsIncludeCredentialLookupSecret GetIdentityParamsIncludeCredential = "lookup_secret"
	GetIdentityParamsIncludeCredentialOidc         GetIdentityParamsIncludeCredential = "oidc"
	GetIdentityParamsIncludeCredentialPasskey      GetIdentityParamsIncludeCredential = "passkey"
	GetIdentityParamsIncludeCredentialPassword     GetIdentityParamsIncludeCredential = "password"
	GetIdentityParamsIncludeCredentialProfile      GetIdentityParamsIncludeCredential = "profile"
	GetIdentityParamsIncludeCredentialSaml         GetIdentityParamsIncludeCredential = "saml"
	GetIdentityParamsIncludeCredentialTotp         GetIdentityParamsIncludeCredential = "totp"
	GetIdentityParamsIncludeCredentialWebauthn     GetIdentityParamsIncludeCredential = "webauthn"
)

// Defines values for DeleteIdentityCredentialsParamsType.
const (
	DeleteIdentityCredentialsParamsTypeCode         DeleteIdentityCredentialsParamsType = "code"
	DeleteIdentityCredentialsParamsTypeCodeRecovery DeleteIdentityCredentialsParamsType = "code_recovery"
	DeleteIdentityCredentialsParamsTypeLinkRecovery DeleteIdentityCredentialsParamsType = "link_recovery"
	DeleteIdentityCredentialsParamsTypeLookupSecret DeleteIdentityCredentialsParamsType = "lookup_secret"
	DeleteIdentityCredentialsParamsTypeOidc         DeleteIdentityCredentialsParamsType = "oidc"
	DeleteIdentityCredentialsParamsTypePasskey      DeleteIdentityCredentialsParamsType = "passkey"
	DeleteIdentityCredentialsParamsTypePassword     DeleteIdentityCredentialsParamsType = "password"
	DeleteIdentityCredentialsParamsTypeProfile      DeleteIdentityCredentialsParamsType = "profile"
	DeleteIdentityCredentialsParamsTypeSaml         DeleteIdentityCredentialsParamsType = "saml"
	DeleteIdentityCredentialsParamsTypeTotp         DeleteIdentityCredentialsParamsType = "totp"
	DeleteIdentityCredentialsParamsTypeWebauthn     DeleteIdentityCredentialsParamsType = "webauthn"
)

// Defines values for ListSessionsParamsExpand.
const (
	ListSessionsParamsExpandDevices  ListSessionsParamsExpand = "devices"
	ListSessionsParamsExpandIdentity ListSessionsParamsExpand = "identity"
)

// Defines values for GetSessionParamsExpand.
const (
	GetSessionParamsExpandDevices  GetSessionParamsExpand = "devices"
	GetSessionParamsExpandIdentity GetSessionParamsExpand = "identity"
)

// AmountInCent defines model for AmountInCent.
type AmountInCent = int64

// AuthenticatorAssuranceLevel The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
// for an attacker to compromise the account.
//
// Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (e.g.
// password + TOTP) have been used.
//
// To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
type AuthenticatorAssuranceLevel string

// BatchCheckPermissionBody Batch Check Permission Body
type BatchCheckPermissionBody struct {
	Tuples *[]Relationship `json:"tuples,omitempty"`
}

// BatchCheckPermissionResult Batch Check Permission Result
type BatchCheckPermissionResult struct {
	// Results An array of check results. The order aligns with the input order.
	Results []CheckPermissionResultWithError `json:"results"`
}

// BatchPatchIdentitiesResponse Patch identities response
type BatchPatchIdentitiesResponse struct {
	// Identities The patch responses for the individual identities.
	Identities *[]IdentityPatchResponse `json:"identities,omitempty"`
}

// CheckOplSyntaxBody Ory Permission Language Document
type CheckOplSyntaxBody = string

// CheckOplSyntaxResult defines model for CheckOplSyntaxResult.
type CheckOplSyntaxResult struct {
	// Errors The list of syntax errors
	Errors *[]ParseError `json:"errors,omitempty"`
}

// CheckPermissionResult The content of the allowed field is mirrored in the HTTP status code.
type CheckPermissionResult struct {
	// Allowed whether the relation tuple is allowed
	Allowed bool `json:"allowed"`
}

// CheckPermissionResultWithError Check Permission Result With Error
type CheckPermissionResultWithError struct {
	// Allowed whether the relation tuple is allowed
	Allowed bool `json:"allowed"`

	// Error any error generated while checking the relation tuple
	Error *string `json:"error,omitempty"`
}

// ContinueWithRecoveryUI Indicates, that the UI flow could be continued by showing a recovery ui
type ContinueWithRecoveryUI struct {
	// Action Action will always be `show_recovery_ui`
	// show_recovery_ui ContinueWithActionShowRecoveryUIString
	Action ContinueWithRecoveryUIAction `json:"action"`
	Flow   ContinueWithRecoveryUIFlow   `json:"flow"`
}

// ContinueWithRecoveryUIAction Action will always be `show_recovery_ui`
// show_recovery_ui ContinueWithActionShowRecoveryUIString
type ContinueWithRecoveryUIAction string

// ContinueWithRecoveryUIFlow defines model for ContinueWithRecoveryUiFlow.
type ContinueWithRecoveryUIFlow struct {
	// ID The ID of the recovery flow
	ID openapi_types.UUID `json:"id"`

	// URL The URL of the recovery flow
	//
	// If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
	URL *string `json:"url,omitempty"`
}

// ContinueWithRedirectBrowserTo Indicates, that the UI flow could be continued by showing a recovery ui
type ContinueWithRedirectBrowserTo struct {
	// Action Action will always be `redirect_browser_to`
	// redirect_browser_to ContinueWithActionRedirectBrowserToString
	Action ContinueWithRedirectBrowserToAction `json:"action"`

	// RedirectBrowserTo The URL to redirect the browser to
	RedirectBrowserTo string `json:"redirect_browser_to"`
}

// ContinueWithRedirectBrowserToAction Action will always be `redirect_browser_to`
// redirect_browser_to ContinueWithActionRedirectBrowserToString
type ContinueWithRedirectBrowserToAction string

// ContinueWithSetOrySessionToken Indicates that a session was issued, and the application should use this token for authenticated requests
type ContinueWithSetOrySessionToken struct {
	// Action Action will always be `set_ory_session_token`
	// set_ory_session_token ContinueWithActionSetOrySessionTokenString
	Action ContinueWithSetOrySessionTokenAction `json:"action"`

	// OrySessionToken Token is the token of the session
	OrySessionToken string `json:"ory_session_token"`
}

// ContinueWithSetOrySessionTokenAction Action will always be `set_ory_session_token`
// set_ory_session_token ContinueWithActionSetOrySessionTokenString
type ContinueWithSetOrySessionTokenAction string

// ContinueWithSettingsUI Indicates, that the UI flow could be continued by showing a settings ui
type ContinueWithSettingsUI struct {
	// Action Action will always be `show_settings_ui`
	// show_settings_ui ContinueWithActionShowSettingsUIString
	Action ContinueWithSettingsUIAction `json:"action"`
	Flow   ContinueWithSettingsUIFlow   `json:"flow"`
}

// ContinueWithSettingsUIAction Action will always be `show_settings_ui`
// show_settings_ui ContinueWithActionShowSettingsUIString
type ContinueWithSettingsUIAction string

// ContinueWithSettingsUIFlow defines model for ContinueWithSettingsUiFlow.
type ContinueWithSettingsUIFlow struct {
	// ID The ID of the settings flow
	ID openapi_types.UUID `json:"id"`

	// URL The URL of the settings flow
	//
	// If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
	URL *string `json:"url,omitempty"`
}

// ContinueWithVerificationUI Indicates, that the UI flow could be continued by showing a verification ui
type ContinueWithVerificationUI struct {
	// Action Action will always be `show_verification_ui`
	// show_verification_ui ContinueWithActionShowVerificationUIString
	Action ContinueWithVerificationUIAction `json:"action"`
	Flow   ContinueWithVerificationUIFlow   `json:"flow"`
}

// ContinueWithVerificationUIAction Action will always be `show_verification_ui`
// show_verification_ui ContinueWithActionShowVerificationUIString
type ContinueWithVerificationUIAction string

// ContinueWithVerificationUIFlow defines model for ContinueWithVerificationUiFlow.
type ContinueWithVerificationUIFlow struct {
	// ID The ID of the verification flow
	ID openapi_types.UUID `json:"id"`

	// URL The URL of the verification flow
	//
	// If this value is set, redirect the user's browser to this URL. This value is typically unset for native clients / API flows.
	URL *string `json:"url,omitempty"`

	// VerifiableAddress The address that should be verified in this flow
	VerifiableAddress string `json:"verifiable_address"`
}

// CourierMessageStatus A Message's Status
type CourierMessageStatus string

// CourierMessageTemplateType Template type
type CourierMessageTemplateType string

// CourierMessageType It can either be `email` or `phone`
type CourierMessageType string

// CreateIdentityBody Create Identity Body
type CreateIdentityBody struct {
	// Credentials Create Identity and Import Credentials
	Credentials *IdentityWithCredentials `json:"credentials,omitempty"`

	// MetadataAdmin Store metadata about the user which is only accessible through admin APIs such as `GET /identities/<id>`.
	MetadataAdmin *interface{} `json:"metadata_admin,omitempty"`

	// MetadataPublic Store metadata about the identity which the identity itself can see when calling for example the
	// session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
	MetadataPublic *interface{} `json:"metadata_public,omitempty"`
	OrganizationID *NullUUID    `json:"organization_id"`

	// RecoveryAddresses RecoveryAddresses contains all the addresses that can be used to recover an identity.
	//
	// Use this structure to import recovery addresses for an identity. Please keep in mind
	// that the address needs to be represented in the Identity Schema or this field will be overwritten
	// on the next identity update.
	RecoveryAddresses *[]RecoveryIdentityAddress `json:"recovery_addresses,omitempty"`

	// SchemaID SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
	SchemaID string `json:"schema_id"`

	// State State is the identity's state.
	// active StateActive
	// inactive StateInactive
	State *CreateIdentityBodyState `json:"state,omitempty"`

	// Traits Traits represent an identity's traits. The identity is able to create, modify, and delete traits
	// in a self-service manner. The input will always be validated against the JSON Schema defined
	// in `schema_url`.
	Traits map[string]interface{} `json:"traits"`

	// VerifiableAddresses VerifiableAddresses contains all the addresses that can be verified by the user.
	//
	// Use this structure to import verified addresses for an identity. Please keep in mind
	// that the address needs to be represented in the Identity Schema or this field will be overwritten
	// on the next identity update.
	VerifiableAddresses *[]VerifiableIdentityAddress `json:"verifiable_addresses,omitempty"`
}

// CreateIdentityBodyState State is the identity's state.
// active StateActive
// inactive StateInactive
type CreateIdentityBodyState string

// CreateRecoveryCodeForIdentityBody Create Recovery Code for Identity Request Body
type CreateRecoveryCodeForIdentityBody struct {
	// ExpiresIn Code Expires In
	//
	// The recovery code will expire after that amount of time has passed. Defaults to the configuration value of
	// `selfservice.methods.code.config.lifespan`.
	ExpiresIn *string `json:"expires_in,omitempty"`

	// FlowType The flow type can either be `api` or `browser`.
	FlowType *SelfServiceFlowType `json:"flow_type,omitempty"`

	// IdentityID Identity to Recover
	//
	// The identity's ID you wish to recover.
	IdentityID openapi_types.UUID `json:"identity_id"`
}

// CreateRecoveryLinkForIdentityBody Create Recovery Link for Identity Request Body
type CreateRecoveryLinkForIdentityBody struct {
	// ExpiresIn Link Expires In
	//
	// The recovery link will expire after that amount of time has passed. Defaults to the configuration value of
	// `selfservice.methods.code.config.lifespan`.
	ExpiresIn *string `json:"expires_in,omitempty"`

	// IdentityID Identity to Recover
	//
	// The identity's ID you wish to recover.
	IdentityID openapi_types.UUID `json:"identity_id"`
}

// CreateRelationshipBody Create Relationship Request Body
type CreateRelationshipBody struct {
	// Namespace Namespace to query
	Namespace *string `json:"namespace,omitempty"`

	// Object Object to query
	Object *string `json:"object,omitempty"`

	// Relation Relation to query
	Relation *string `json:"relation,omitempty"`

	// SubjectID SubjectID to query
	//
	// Either SubjectSet or SubjectID can be provided.
	SubjectID  *string     `json:"subject_id,omitempty"`
	SubjectSet *SubjectSet `json:"subject_set,omitempty"`
}

// CreateVerifiableCredentialRequestBody defines model for CreateVerifiableCredentialRequestBody.
type CreateVerifiableCredentialRequestBody struct {
	Format *string                    `json:"format,omitempty"`
	Proof  *VerifiableCredentialProof `json:"proof,omitempty"`
	Types  *[]string                  `json:"types,omitempty"`
}

// CustomHostnameStatus defines model for CustomHostnameStatus.
type CustomHostnameStatus = string

// DefaultError defines model for DefaultError.
type DefaultError = interface{}

// DeleteMySessionsCount Deleted Session Count
type DeleteMySessionsCount struct {
	// Count The number of sessions that were revoked.
	Count *int64 `json:"count,omitempty"`
}

// Duration A Duration represents the elapsed time between two instants
// as an int64 nanosecond count. The representation limits the
// largest representable duration to approximately 290 years.
type Duration = int64

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// ExpandedPermissionTree defines model for ExpandedPermissionTree.
type ExpandedPermissionTree struct {
	// Children The children of the node, possibly none.
	Children *[]ExpandedPermissionTree `json:"children,omitempty"`

	// Tuple Relationship
	Tuple *Relationship `json:"tuple,omitempty"`

	// Type The type of the node.
	// union TreeNodeUnion
	// exclusion TreeNodeExclusion
	// intersection TreeNodeIntersection
	// leaf TreeNodeLeaf
	// tuple_to_subject_set TreeNodeTupleToSubjectSet
	// computed_subject_set TreeNodeComputedSubjectSet
	// not TreeNodeNot
	// unspecified TreeNodeUnspecified
	Type ExpandedPermissionTreeType `json:"type"`
}

// ExpandedPermissionTreeType The type of the node.
// union TreeNodeUnion
// exclusion TreeNodeExclusion
// intersection TreeNodeIntersection
// leaf TreeNodeLeaf
// tuple_to_subject_set TreeNodeTupleToSubjectSet
// computed_subject_set TreeNodeComputedSubjectSet
// not TreeNodeNot
// unspecified TreeNodeUnspecified
type ExpandedPermissionTreeType string

// GameStat defines model for GameStat.
type GameStat struct {
	Draw        int32  `json:"draw"`
	Interrupted int32  `json:"interrupted"`
	Loss        int32  `json:"loss"`
	Total       *int32 `json:"total,omitempty"`
	Win         int32  `json:"win"`
}

// GameStats defines model for GameStats.
type GameStats struct {
	All         GameStat `json:"all"`
	Blitz       GameStat `json:"blitz"`
	Bullet      GameStat `json:"bullet"`
	Classical   GameStat `json:"classical"`
	Hyperbullet GameStat `json:"hyperbullet"`
	Rapid       GameStat `json:"rapid"`
}

// GameTimeCategory defines model for GameTimeCategory.
type GameTimeCategory struct {
	// ID Game time category id
	ID UUID `json:"id"`

	// Name Game time category name
	Name string `json:"name"`

	// UpperTimeLimitSecs Game time category upper time limit
	UpperTimeLimitSecs *int32 `json:"upper_time_limit_secs,omitempty"`
}

// GameTimeKind defines model for GameTimeKind.
type GameTimeKind struct {
	// Enabled Whether a game time kind is supported (enabled)
	Enabled bool `json:"enabled"`

	// ID Game time kind id
	ID UUID `json:"id"`

	// Name Game time kind name
	Name string `json:"name"`
}

// GameVariant defines model for GameVariant.
type GameVariant struct {
	// Enabled Whether a game variant is supported (enabled)
	Enabled bool `json:"enabled"`

	// ID Game variant id
	ID UUID `json:"id"`

	// Name Game variant name
	Name string `json:"name"`
}

// Healthy defines model for Healthy.
type Healthy struct {
	Alive bool `json:"alive"`
}

// ID defines model for ID.
type ID = int64

// Identity An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
type Identity struct {
	// CreatedAt CreatedAt is a helper struct field for gobuffalo.pop.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Credentials Credentials represents all credentials that can be used for authenticating this identity.
	Credentials *map[string]IdentityCredentials `json:"credentials,omitempty"`

	// ID ID is the identity's unique identifier.
	//
	// The Identity ID can not be changed and can not be chosen. This ensures future
	// compatibility and optimization for distributed stores such as CockroachDB.
	ID openapi_types.UUID `json:"id"`

	// MetadataAdmin NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
	MetadataAdmin *NullJSONRawMessage `json:"metadata_admin"`

	// MetadataPublic NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
	MetadataPublic *NullJSONRawMessage `json:"metadata_public"`
	OrganizationID *NullUUID           `json:"organization_id"`

	// RecoveryAddresses RecoveryAddresses contains all the addresses that can be used to recover an identity.
	RecoveryAddresses *[]RecoveryIdentityAddress `json:"recovery_addresses,omitempty"`

	// SchemaID SchemaID is the ID of the JSON Schema to be used for validating the identity's traits.
	SchemaID string `json:"schema_id"`

	// SchemaURL SchemaURL is the URL of the endpoint where the identity's traits schema can be fetched from.
	//
	// format: url
	SchemaURL string `json:"schema_url"`

	// State State is the identity's state.
	//
	// This value has currently no effect.
	// active StateActive
	// inactive StateInactive
	State          *IdentityState `json:"state,omitempty"`
	StateChangedAt *NullTime      `json:"state_changed_at"`

	// Traits Traits represent an identity's traits. The identity is able to create, modify, and delete traits
	// in a self-service manner. The input will always be validated against the JSON Schema defined
	// in `schema_url`.
	Traits IdentityTraits `json:"traits"`

	// UpdatedAt UpdatedAt is a helper struct field for gobuffalo.pop.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// VerifiableAddresses VerifiableAddresses contains all the addresses that can be verified by the user.
	VerifiableAddresses *[]VerifiableIdentityAddress `json:"verifiable_addresses,omitempty"`
}

// IdentityState State is the identity's state.
//
// This value has currently no effect.
// active StateActive
// inactive StateInactive
type IdentityState string

// IdentityCredentials Credentials represents a specific credential type
type IdentityCredentials struct {
	Config *JSONRawMessage `json:"config,omitempty"`

	// CreatedAt CreatedAt is a helper struct field for gobuffalo.pop.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Identifiers Identifiers represents a list of unique identifiers this credential type matches.
	Identifiers *[]string `json:"identifiers,omitempty"`

	// Type Type discriminates between different types of credentials.
	// password CredentialsTypePassword
	// oidc CredentialsTypeOIDC
	// totp CredentialsTypeTOTP
	// lookup_secret CredentialsTypeLookup
	// webauthn CredentialsTypeWebAuthn
	// code CredentialsTypeCodeAuth
	// passkey CredentialsTypePasskey
	// profile CredentialsTypeProfile
	// saml CredentialsTypeSAML
	// link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
	// code_recovery CredentialsTypeRecoveryCode
	Type *IdentityCredentialsType `json:"type,omitempty"`

	// UpdatedAt UpdatedAt is a helper struct field for gobuffalo.pop.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Version Version refers to the version of the credential. Useful when changing the config schema.
	Version *int64 `json:"version,omitempty"`
}

// IdentityCredentialsType Type discriminates between different types of credentials.
// password CredentialsTypePassword
// oidc CredentialsTypeOIDC
// totp CredentialsTypeTOTP
// lookup_secret CredentialsTypeLookup
// webauthn CredentialsTypeWebAuthn
// code CredentialsTypeCodeAuth
// passkey CredentialsTypePasskey
// profile CredentialsTypeProfile
// saml CredentialsTypeSAML
// link_recovery CredentialsTypeRecoveryLink  CredentialsTypeRecoveryLink is a special credential type linked to the link strategy (recovery flow).  It is not used within the credentials object itself.
// code_recovery CredentialsTypeRecoveryCode
type IdentityCredentialsType string

// IdentityPatch Payload for patching an identity
type IdentityPatch struct {
	// Create Create Identity Body
	Create *CreateIdentityBody `json:"create,omitempty"`

	// PatchID The ID of this patch.
	//
	// The patch ID is optional. If specified, the ID will be returned in the
	// response, so consumers of this API can correlate the response with the
	// patch.
	PatchID *openapi_types.UUID `json:"patch_id,omitempty"`
}

// IdentityPatchResponse Response for a single identity patch
type IdentityPatchResponse struct {
	// Action The action for this specific patch
	// create ActionCreate  Create this identity.
	// error ActionError  Error indicates that the patch failed.
	Action *IdentityPatchResponseAction `json:"action,omitempty"`
	Error  *DefaultError                `json:"error,omitempty"`

	// Identity The identity ID payload of this patch
	Identity *openapi_types.UUID `json:"identity,omitempty"`

	// PatchID The ID of this patch response, if an ID was specified in the patch.
	PatchID *openapi_types.UUID `json:"patch_id,omitempty"`
}

// IdentityPatchResponseAction The action for this specific patch
// create ActionCreate  Create this identity.
// error ActionError  Error indicates that the patch failed.
type IdentityPatchResponseAction string

// IdentitySchema Raw JSON Schema
type IdentitySchema = map[string]interface{}

// IdentitySchemaContainer An Identity JSON Schema Container
type IdentitySchemaContainer struct {
	// ID The ID of the Identity JSON Schema
	ID *string `json:"id,omitempty"`

	// Schema The actual Identity JSON Schema
	Schema *map[string]interface{} `json:"schema,omitempty"`
}

// IdentitySchemas List of Identity JSON Schemas
type IdentitySchemas = []IdentitySchemaContainer

// IdentityTraits Traits represent an identity's traits. The identity is able to create, modify, and delete traits
// in a self-service manner. The input will always be validated against the JSON Schema defined
// in `schema_url`.
type IdentityTraits = interface{}

// IdentityVerifiableAddressStatus VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
type IdentityVerifiableAddressStatus = string

// IdentityWithCredentials Create Identity and Import Credentials
type IdentityWithCredentials struct {
	// Oidc Create Identity and Import Social Sign In Credentials
	Oidc *IdentityWithCredentialsOidc `json:"oidc,omitempty"`

	// Password Create Identity and Import Password Credentials
	Password *IdentityWithCredentialsPassword `json:"password,omitempty"`

	// Saml Payload to import SAML credentials
	Saml *IdentityWithCredentialsSaml `json:"saml,omitempty"`
}

// IdentityWithCredentialsOidc Create Identity and Import Social Sign In Credentials
type IdentityWithCredentialsOidc struct {
	Config *IdentityWithCredentialsOidcConfig `json:"config,omitempty"`
}

// IdentityWithCredentialsOidcConfig defines model for IdentityWithCredentialsOidcConfig.
type IdentityWithCredentialsOidcConfig struct {
	// Providers A list of OpenID Connect Providers
	Providers *[]IdentityWithCredentialsOidcConfigProvider `json:"providers,omitempty"`
}

// IdentityWithCredentialsOidcConfigProvider Create Identity and Import Social Sign In Credentials Configuration
type IdentityWithCredentialsOidcConfigProvider struct {
	Organization *NullUUID `json:"organization"`

	// Provider The OpenID Connect provider to link the subject to. Usually something like `google` or `github`.
	Provider string `json:"provider"`

	// Subject The subject (`sub`) of the OpenID Connect connection. Usually the `sub` field of the ID Token.
	Subject string `json:"subject"`

	// UseAutoLink If set, this credential allows the user to sign in using the OpenID Connect provider without setting the subject first.
	UseAutoLink *bool `json:"use_auto_link,omitempty"`
}

// IdentityWithCredentialsPassword Create Identity and Import Password Credentials
type IdentityWithCredentialsPassword struct {
	// Config Create Identity and Import Password Credentials Configuration
	Config *IdentityWithCredentialsPasswordConfig `json:"config,omitempty"`
}

// IdentityWithCredentialsPasswordConfig Create Identity and Import Password Credentials Configuration
type IdentityWithCredentialsPasswordConfig struct {
	// HashedPassword The hashed password in [PHC format](https://www.ory.sh/docs/kratos/manage-identities/import-user-accounts-identities#hashed-passwords)
	HashedPassword *string `json:"hashed_password,omitempty"`

	// Password The password in plain text if no hash is available.
	Password *string `json:"password,omitempty"`

	// UsePasswordMigrationHook If set to true, the password will be migrated using the password migration hook.
	UsePasswordMigrationHook *bool `json:"use_password_migration_hook,omitempty"`
}

// IdentityWithCredentialsSaml Payload to import SAML credentials
type IdentityWithCredentialsSaml struct {
	// Config Payload of SAML providers
	Config *IdentityWithCredentialsSamlConfig `json:"config,omitempty"`
}

// IdentityWithCredentialsSamlConfig Payload of SAML providers
type IdentityWithCredentialsSamlConfig struct {
	// Providers A list of SAML Providers
	Providers *[]IdentityWithCredentialsSamlConfigProvider `json:"providers,omitempty"`
}

// IdentityWithCredentialsSamlConfigProvider Payload of specific SAML provider
type IdentityWithCredentialsSamlConfigProvider struct {
	Organization *NullUUID `json:"organization"`

	// Provider The SAML provider to link the subject to.
	Provider string `json:"provider"`

	// Subject The unique subject of the SAML connection. This value must be immutable at the source.
	Subject string `json:"subject"`
}

// Invoice defines model for Invoice.
type Invoice struct {
	// ID The ID of the invoice.
	ID         *openapi_types.UUID `json:"id,omitempty"`
	InvoicedAt Time                `json:"invoiced_at"`

	// Type Type is the type of the invoice.
	// usage InvoiceTypeUsage
	// base InvoiceTypeBase
	Type      *InvoiceType   `json:"type,omitempty"`
	UpdatedAt *time.Time     `json:"updated_at,omitempty"`
	V1        *InvoiceDataV1 `json:"v1,omitempty"`
}

// InvoiceType Type is the type of the invoice.
// usage InvoiceTypeUsage
// base InvoiceTypeBase
type InvoiceType string

// InvoiceDataV1 defines model for InvoiceDataV1.
type InvoiceDataV1 struct {
	BillingPeriod TimeInterval `json:"billing_period"`

	// Currency The currency of the invoice.
	Currency *string `json:"currency,omitempty"`

	// Deleted Deleted is true if the invoice has been soft-deleted.
	Deleted *bool `json:"deleted,omitempty"`

	// Items The items that are part of this invoice.
	Items *[]LineItemV1 `json:"items,omitempty"`

	// Plan The plan that this invoice is based on, in the format "Name@version".
	Plan              *string `json:"plan,omitempty"`
	StripeInvoiceItem *string `json:"stripe_invoice_item,omitempty"`

	// StripeInvoiceStatus The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
	StripeInvoiceStatus *InvoiceStatus `json:"stripe_invoice_status,omitempty"`

	// StripeLink An optional link to the invoice on Stripe.
	StripeLink *string `json:"stripe_link,omitempty"`

	// Subtitle The subtitle of the invoice.
	Subtitle *string      `json:"subtitle,omitempty"`
	Tax      *TaxLineItem `json:"tax,omitempty"`

	// Title The title of the invoice.
	Title       *string      `json:"title,omitempty"`
	TotalInCent AmountInCent `json:"total_in_cent"`
}

// InvoiceStatus The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
type InvoiceStatus = string

// JSONRawMessage defines model for JSONRawMessage.
type JSONRawMessage = map[string]interface{}

// JSONPatch A JSONPatch document as defined by RFC 6902
type JSONPatch struct {
	// From This field is used together with operation "move" and uses JSON Pointer notation.
	//
	// Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
	From *string `json:"from,omitempty"`

	// Op The operation to be performed. One of "add", "remove", "replace", "move", "copy", or "test".
	Op JSONPatchOp `json:"op"`

	// Path The path to the target path. Uses JSON pointer notation.
	//
	// Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
	Path string `json:"path"`

	// Value The value to be used within the operations.
	//
	// Learn more [about JSON Pointers](https://datatracker.ietf.org/doc/html/rfc6901#section-5).
	Value *interface{} `json:"value,omitempty"`
}

// JSONPatchOp The operation to be performed. One of "add", "remove", "replace", "move", "copy", or "test".
type JSONPatchOp string

// JSONPatchDocument A JSONPatchDocument request
type JSONPatchDocument = []JSONPatch

// JSONWebKey defines model for JsonWebKey.
type JSONWebKey struct {
	// Alg The "alg" (algorithm) parameter identifies the algorithm intended for
	// use with the key.  The values used should either be registered in the
	// IANA "JSON Web Signature and Encryption Algorithms" registry
	// established by [JWA] or be a value that contains a Collision-
	// Resistant Name.
	Alg string  `json:"alg"`
	Crv *string `json:"crv,omitempty"`
	D   *string `json:"d,omitempty"`
	Dp  *string `json:"dp,omitempty"`
	Dq  *string `json:"dq,omitempty"`
	E   *string `json:"e,omitempty"`
	K   *string `json:"k,omitempty"`

	// Kid The "kid" (key ID) parameter is used to match a specific key.  This
	// is used, for instance, to choose among a set of keys within a JWK Set
	// during key rollover.  The structure of the "kid" value is
	// unspecified.  When "kid" values are used within a JWK Set, different
	// keys within the JWK Set SHOULD use distinct "kid" values.  (One
	// example in which different keys might use the same "kid" value is if
	// they have different "kty" (key type) values but are considered to be
	// equivalent alternatives by the application using them.)  The "kid"
	// value is a case-sensitive string.
	Kid string `json:"kid"`

	// Kty The "kty" (key type) parameter identifies the cryptographic algorithm
	// family used with the key, such as "RSA" or "EC". "kty" values should
	// either be registered in the IANA "JSON Web Key Types" registry
	// established by [JWA] or be a value that contains a Collision-
	// Resistant Name.  The "kty" value is a case-sensitive string.
	Kty string  `json:"kty"`
	N   *string `json:"n,omitempty"`
	P   *string `json:"p,omitempty"`
	Q   *string `json:"q,omitempty"`
	Qi  *string `json:"qi,omitempty"`

	// Use Use ("public key use") identifies the intended use of
	// the public key. The "use" parameter is employed to indicate whether
	// a public key is used for encrypting data or verifying the signature
	// on data. Values are commonly "sig" (signature) or "enc" (encryption).
	Use string  `json:"use"`
	X   *string `json:"x,omitempty"`

	// X5C The "x5c" (X.509 certificate chain) parameter contains a chain of one
	// or more PKIX certificates [RFC5280].  The certificate chain is
	// represented as a JSON array of certificate value strings.  Each
	// string in the array is a base64-encoded (Section 4 of [RFC4648] --
	// not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.
	// The PKIX certificate containing the key value MUST be the first
	// certificate.
	X5C *[]string `json:"x5c,omitempty"`
	Y   *string   `json:"y,omitempty"`
}

// KetoNamespace defines model for KetoNamespace.
type KetoNamespace struct {
	ID   *int64  `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// KetoNamespaces defines model for KetoNamespaces.
type KetoNamespaces = []KetoNamespace

// LineItemV1 defines model for LineItemV1.
type LineItemV1 struct {
	AmountInCent *AmountInCent `json:"amount_in_cent,omitempty"`
	Description  *string       `json:"description,omitempty"`

	// Items Each line item can have sub-items to create a hierarchy.
	Items     *[]LineItemV1 `json:"items,omitempty"`
	Quantity  *int64        `json:"quantity,omitempty"`
	Title     *string       `json:"title,omitempty"`
	UnitPrice *string       `json:"unit_price,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Body    string  `json:"body"`
	Channel *string `json:"channel,omitempty"`

	// CreatedAt CreatedAt is a helper struct field for gobuffalo.pop.
	CreatedAt time.Time `json:"created_at"`

	// Dispatches Dispatches store information about the attempts of delivering a message
	// May contain an error if any happened, or just the `success` state.
	Dispatches *[]MessageDispatch `json:"dispatches,omitempty"`
	ID         openapi_types.UUID `json:"id"`
	Recipient  string             `json:"recipient"`
	SendCount  int64              `json:"send_count"`

	// Status A Message's Status
	Status  CourierMessageStatus `json:"status"`
	Subject string               `json:"subject"`

	// TemplateType Template type
	TemplateType CourierMessageTemplateType `json:"template_type"`

	// Type It can either be `email` or `phone`
	Type CourierMessageType `json:"type"`

	// UpdatedAt UpdatedAt is a helper struct field for gobuffalo.pop.
	UpdatedAt time.Time `json:"updated_at"`
}

// MessageDispatch MessageDispatch represents an attempt of sending a courier message
// It contains the status of the attempt (failed or successful) and the error if any occured
type MessageDispatch struct {
	// CreatedAt CreatedAt is a helper struct field for gobuffalo.pop.
	CreatedAt time.Time       `json:"created_at"`
	Error     *JSONRawMessage `json:"error,omitempty"`

	// ID The ID of this message dispatch
	ID openapi_types.UUID `json:"id"`

	// MessageID The ID of the message being dispatched
	MessageID openapi_types.UUID `json:"message_id"`

	// Status The status of this dispatch
	// Either "failed" or "success"
	// failed CourierMessageDispatchStatusFailed
	// success CourierMessageDispatchStatusSuccess
	Status MessageDispatchStatus `json:"status"`

	// UpdatedAt UpdatedAt is a helper struct field for gobuffalo.pop.
	UpdatedAt time.Time `json:"updated_at"`
}

// MessageDispatchStatus The status of this dispatch
// Either "failed" or "success"
// failed CourierMessageDispatchStatusFailed
// success CourierMessageDispatchStatusSuccess
type MessageDispatchStatus string

// Namespace defines model for Namespace.
type Namespace struct {
	// Name Name of the namespace.
	Name *string `json:"name,omitempty"`
}

// NullBool defines model for NullBool.
type NullBool = bool

// NullDuration defines model for NullDuration.
type NullDuration = string

// NullInt defines model for NullInt.
type NullInt = int

// NullInt64 defines model for NullInt64.
type NullInt64 = int

// NullJSONRawMessage NullJSONRawMessage represents a json.RawMessage that works well with JSON, SQL, and Swagger and is NULLable-
type NullJSONRawMessage = map[string]interface{}

// NullString defines model for NullString.
type NullString = string

// NullTime defines model for NullTime.
type NullTime = time.Time

// NullUUID defines model for NullUUID.
type NullUUID = string

// ParseError defines model for ParseError.
type ParseError struct {
	End     *SourcePosition `json:"end,omitempty"`
	Message *string         `json:"message,omitempty"`
	Start   *SourcePosition `json:"start,omitempty"`
}

// PatchIdentitiesBody Patch Identities Body
type PatchIdentitiesBody struct {
	// Identities Identities holds the list of patches to apply
	//
	// required
	Identities *[]IdentityPatch `json:"identities,omitempty"`
}

// PostCheckPermissionBody Check Permission using Post Request Body
type PostCheckPermissionBody struct {
	// Namespace Namespace to query
	Namespace *string `json:"namespace,omitempty"`

	// Object Object to query
	Object *string `json:"object,omitempty"`

	// Relation Relation to query
	Relation *string `json:"relation,omitempty"`

	// SubjectID SubjectID to query
	//
	// Either SubjectSet or SubjectID can be provided.
	SubjectID  *string     `json:"subject_id,omitempty"`
	SubjectSet *SubjectSet `json:"subject_set,omitempty"`
}

// PostCheckPermissionOrErrorBody Post Check Permission Or Error Body
type PostCheckPermissionOrErrorBody struct {
	// Namespace Namespace to query
	Namespace *string `json:"namespace,omitempty"`

	// Object Object to query
	Object *string `json:"object,omitempty"`

	// Relation Relation to query
	Relation *string `json:"relation,omitempty"`

	// SubjectID SubjectID to query
	//
	// Either SubjectSet or SubjectID can be provided.
	SubjectID  *string     `json:"subject_id,omitempty"`
	SubjectSet *SubjectSet `json:"subject_set,omitempty"`
}

// QuickGame defines model for QuickGame.
type QuickGame struct {
	// ClockSecs Clock seconds
	ClockSecs int32 `json:"clock_secs"`

	// IncrementSecs Increment seconds
	IncrementSecs int32 `json:"increment_secs"`

	// Name Quick game name
	Name string `json:"name"`
}

// Ready defines model for Ready.
type Ready struct {
	Ready bool `json:"ready"`
}

// RecoveryAddressType defines model for RecoveryAddressType.
type RecoveryAddressType = string

// RecoveryCodeForIdentity Used when an administrator creates a recovery code for an identity.
type RecoveryCodeForIdentity struct {
	// ExpiresAt Expires At is the timestamp of when the recovery flow expires
	//
	// The timestamp when the recovery code expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// RecoveryCode RecoveryCode is the code that can be used to recover the account
	RecoveryCode string `json:"recovery_code"`

	// RecoveryLink RecoveryLink with flow
	//
	// This link opens the recovery UI with an empty `code` field.
	RecoveryLink string `json:"recovery_link"`
}

// RecoveryIdentityAddress defines model for RecoveryIdentityAddress.
type RecoveryIdentityAddress struct {
	// CreatedAt CreatedAt is a helper struct field for gobuffalo.pop.
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	ID        openapi_types.UUID `json:"id"`

	// UpdatedAt UpdatedAt is a helper struct field for gobuffalo.pop.
	UpdatedAt *time.Time          `json:"updated_at,omitempty"`
	Value     string              `json:"value"`
	Via       RecoveryAddressType `json:"via"`
}

// RecoveryLinkForIdentity Used when an administrator creates a recovery link for an identity.
type RecoveryLinkForIdentity struct {
	// ExpiresAt Recovery Link Expires At
	//
	// The timestamp when the recovery link expires.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// RecoveryLink Recovery Link
	//
	// This link can be used to recover the account.
	RecoveryLink string `json:"recovery_link"`
}

// RejectOAuth2Request defines model for RejectOAuth2Request.
type RejectOAuth2Request struct {
	// Error The error should follow the OAuth2 error format (e.g. `invalid_request`, `login_required`).
	//
	// Defaults to `request_denied`.
	Error *string `json:"error,omitempty"`

	// ErrorDebug Debug contains information to help resolve the problem as a developer. Usually not exposed
	// to the public but only in the server logs.
	ErrorDebug *string `json:"error_debug,omitempty"`

	// ErrorDescription Description of the error in a human readable format.
	ErrorDescription *string `json:"error_description,omitempty"`

	// ErrorHint Hint to help resolve the error.
	ErrorHint *string `json:"error_hint,omitempty"`

	// StatusCode Represents the HTTP status code of the error (e.g. 401 or 403)
	//
	// Defaults to 400
	StatusCode *int64 `json:"status_code,omitempty"`
}

// RelationQuery Relation Query
type RelationQuery struct {
	// Namespace Namespace to query
	Namespace *string `json:"namespace,omitempty"`

	// Object Object to query
	Object *string `json:"object,omitempty"`

	// Relation Relation to query
	Relation *string `json:"relation,omitempty"`

	// SubjectID SubjectID to query
	//
	// Either SubjectSet or SubjectID can be provided.
	SubjectID  *string     `json:"subject_id,omitempty"`
	SubjectSet *SubjectSet `json:"subject_set,omitempty"`
}

// Relationship Relationship
type Relationship struct {
	// Namespace Namespace of the Relation Tuple
	Namespace string `json:"namespace"`

	// Object Object of the Relation Tuple
	Object string `json:"object"`

	// Relation Relation of the Relation Tuple
	Relation string `json:"relation"`

	// SubjectID SubjectID of the Relation Tuple
	//
	// Either SubjectSet or SubjectID can be provided.
	SubjectID  *string     `json:"subject_id,omitempty"`
	SubjectSet *SubjectSet `json:"subject_set,omitempty"`
}

// RelationshipNamespaces Relationship Namespace List
type RelationshipNamespaces struct {
	Namespaces *[]Namespace `json:"namespaces,omitempty"`
}

// RelationshipPatch Payload for patching a relationship
type RelationshipPatch struct {
	Action *RelationshipPatchAction `json:"action,omitempty"`

	// RelationTuple Relationship
	RelationTuple *Relationship `json:"relation_tuple,omitempty"`
}

// RelationshipPatchAction defines model for RelationshipPatch.Action.
type RelationshipPatchAction string

// Relationships Paginated Relationship List
type Relationships struct {
	// NextPageToken The opaque token to provide in a subsequent request
	// to get the next page. It is the empty string iff this is
	// the last page.
	NextPageToken  *string         `json:"next_page_token,omitempty"`
	RelationTuples *[]Relationship `json:"relation_tuples,omitempty"`
}

// SelfServiceFlowType The flow type can either be `api` or `browser`.
type SelfServiceFlowType = string

// Session A Session
type Session struct {
	// Active Active state. If false the session is no longer active.
	Active *bool `json:"active,omitempty"`

	// AuthenticatedAt The Session Authentication Timestamp
	//
	// When this session was authenticated at. If multi-factor authentication was used this
	// is the time when the last factor was authenticated (e.g. the TOTP code challenge was completed).
	AuthenticatedAt *time.Time `json:"authenticated_at,omitempty"`

	// AuthenticationMethods A list of authenticators which were used to authenticate the session.
	AuthenticationMethods *SessionAuthenticationMethods `json:"authentication_methods,omitempty"`

	// AuthenticatorAssuranceLevel The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
	// for an attacker to compromise the account.
	//
	// Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (e.g.
	// password + TOTP) have been used.
	//
	// To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
	AuthenticatorAssuranceLevel *AuthenticatorAssuranceLevel `json:"authenticator_assurance_level,omitempty"`

	// Devices Devices has history of all endpoints where the session was used
	Devices *[]SessionDevice `json:"devices,omitempty"`

	// ExpiresAt The Session Expiry
	//
	// When this session expires at.
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// ID Session ID
	ID openapi_types.UUID `json:"id"`

	// Identity An [identity](https://www.ory.sh/docs/kratos/concepts/identity-user-model) represents a (human) user in Ory.
	Identity *Identity `json:"identity,omitempty"`

	// IssuedAt The Session Issuance Timestamp
	//
	// When this session was issued at. Usually equal or close to `authenticated_at`.
	IssuedAt *time.Time `json:"issued_at,omitempty"`

	// Tokenized Tokenized is the tokenized (e.g. JWT) version of the session.
	//
	// It is only set when the `tokenize` query parameter was set to a valid tokenize template during calls to `/session/whoami`.
	Tokenized *string `json:"tokenized,omitempty"`
}

// SessionAuthenticationMethod A singular authenticator used during authentication / login.
type SessionAuthenticationMethod struct {
	// Aal The authenticator assurance level can be one of "aal1", "aal2", or "aal3". A higher number means that it is harder
	// for an attacker to compromise the account.
	//
	// Generally, "aal1" implies that one authentication factor was used while AAL2 implies that two factors (e.g.
	// password + TOTP) have been used.
	//
	// To learn more about these levels please head over to: https://www.ory.sh/kratos/docs/concepts/credentials
	Aal *AuthenticatorAssuranceLevel `json:"aal,omitempty"`

	// CompletedAt When the authentication challenge was completed.
	CompletedAt *time.Time                         `json:"completed_at,omitempty"`
	Method      *SessionAuthenticationMethodMethod `json:"method,omitempty"`

	// Organization The Organization id used for authentication
	Organization *string `json:"organization,omitempty"`

	// Provider OIDC or SAML provider id used for authentication
	Provider *string `json:"provider,omitempty"`
}

// SessionAuthenticationMethodMethod defines model for SessionAuthenticationMethod.Method.
type SessionAuthenticationMethodMethod string

// SessionAuthenticationMethods A list of authenticators which were used to authenticate the session.
type SessionAuthenticationMethods = []SessionAuthenticationMethod

// SessionDevice Device corresponding to a Session
type SessionDevice struct {
	// ID Device record ID
	ID openapi_types.UUID `json:"id"`

	// IPAddress IPAddress of the client
	IPAddress *string `json:"ip_address,omitempty"`

	// Location Geo Location corresponding to the IP Address
	Location *string `json:"location,omitempty"`

	// UserAgent UserAgent of the client
	UserAgent *string `json:"user_agent,omitempty"`
}

// SourcePosition defines model for SourcePosition.
type SourcePosition struct {
	Line   *int64 `json:"Line,omitempty"`
	Column *int64 `json:"column,omitempty"`
}

// String defines model for String.
type String = NullString

// StringSliceJSONFormat defines model for StringSliceJSONFormat.
type StringSliceJSONFormat = []string

// SubjectSet defines model for SubjectSet.
type SubjectSet struct {
	// Namespace Namespace of the Subject Set
	Namespace string `json:"namespace"`

	// Object Object of the Subject Set
	Object string `json:"object"`

	// Relation Relation of the Subject Set
	Relation string `json:"relation"`
}

// TaxLineItem defines model for TaxLineItem.
type TaxLineItem struct {
	AmountInCent *AmountInCent `json:"amount_in_cent,omitempty"`
	Title        *string       `json:"title,omitempty"`
}

// Time defines model for Time.
type Time = time.Time

// TimeInterval defines model for TimeInterval.
type TimeInterval struct {
	// End The end of the time period.
	End time.Time `json:"end"`

	// Start The start of the time period.
	Start time.Time `json:"start"`
}

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// UINode Nodes are represented as HTML elements or their native UI equivalents. For example,
// a node can be an `<img>` tag, or an `<input element>` but also `some plain text`.
type UINode struct {
	Attributes UINodeAttributes `json:"attributes"`

	// Group Group specifies which group (e.g. password authenticator) this node belongs to.
	// default DefaultGroup
	// password PasswordGroup
	// oidc OpenIDConnectGroup
	// profile ProfileGroup
	// link LinkGroup
	// code CodeGroup
	// totp TOTPGroup
	// lookup_secret LookupGroup
	// webauthn WebAuthnGroup
	// passkey PasskeyGroup
	// identifier_first IdentifierFirstGroup
	// captcha CaptchaGroup
	// saml SAMLGroup
	Group    UINodeGroup `json:"group"`
	Messages UITexts     `json:"messages"`

	// Meta This might include a label and other information that can optionally
	// be used to render UIs.
	Meta UINodeMeta `json:"meta"`

	// Type The node's type
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	Type UINodeType `json:"type"`
}

// UINodeGroup Group specifies which group (e.g. password authenticator) this node belongs to.
// default DefaultGroup
// password PasswordGroup
// oidc OpenIDConnectGroup
// profile ProfileGroup
// link LinkGroup
// code CodeGroup
// totp TOTPGroup
// lookup_secret LookupGroup
// webauthn WebAuthnGroup
// passkey PasskeyGroup
// identifier_first IdentifierFirstGroup
// captcha CaptchaGroup
// saml SAMLGroup
type UINodeGroup string

// UINodeType The node's type
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeType string

// UINodeAnchorAttributes defines model for UiNodeAnchorAttributes.
type UINodeAnchorAttributes struct {
	// Href The link's href (destination) URL.
	//
	// format: uri
	Href string `json:"href"`

	// ID A unique identifier
	ID string `json:"id"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeAnchorAttributesNodeType `json:"node_type"`
	Title    UIText                         `json:"title"`
}

// UINodeAnchorAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "a".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeAnchorAttributesNodeType string

// UINodeAttributes defines model for UiNodeAttributes.
type UINodeAttributes struct {
	union json.RawMessage
}

// UINodeDivisionAttributes Division sections are used for interactive widgets that require a hook in the DOM / view.
type UINodeDivisionAttributes struct {
	// Class The script MIME type
	Class *string `json:"class,omitempty"`

	// Data Data is a map of key-value pairs that are passed to the division.
	//
	// They may be used for `data-...` attributes.
	Data *map[string]string `json:"data,omitempty"`

	// ID A unique identifier
	ID string `json:"id"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeDivisionAttributesNodeType `json:"node_type"`
}

// UINodeDivisionAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeDivisionAttributesNodeType string

// UINodeImageAttributes defines model for UiNodeImageAttributes.
type UINodeImageAttributes struct {
	// Height Height of the image
	Height int64 `json:"height"`

	// ID A unique identifier
	ID string `json:"id"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeImageAttributesNodeType `json:"node_type"`

	// Src The image's source URL.
	//
	// format: uri
	Src string `json:"src"`

	// Width Width of the image
	Width int64 `json:"width"`
}

// UINodeImageAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "img".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeImageAttributesNodeType string

// UINodeInputAttributes InputAttributes represents the attributes of an input node
type UINodeInputAttributes struct {
	// Autocomplete The autocomplete attribute for the input.
	// email InputAttributeAutocompleteEmail
	// tel InputAttributeAutocompleteTel
	// url InputAttributeAutocompleteUrl
	// current-password InputAttributeAutocompleteCurrentPassword
	// new-password InputAttributeAutocompleteNewPassword
	// one-time-code InputAttributeAutocompleteOneTimeCode
	Autocomplete *UINodeInputAttributesAutocomplete `json:"autocomplete,omitempty"`

	// Disabled Sets the input's disabled field to true or false.
	Disabled bool    `json:"disabled"`
	Label    *UIText `json:"label,omitempty"`

	// Maxlength MaxLength may contain the input's maximum length.
	Maxlength *int64 `json:"maxlength,omitempty"`

	// Name The input's element name.
	Name string `json:"name"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeInputAttributesNodeType `json:"node_type"`

	// Onclick OnClick may contain javascript which should be executed on click. This is primarily
	// used for WebAuthn.
	//
	// Deprecated: Using OnClick requires the use of eval() which is a security risk. Use OnClickTrigger instead.
	Onclick *string `json:"onclick,omitempty"`

	// OnclickTrigger OnClickTrigger may contain a WebAuthn trigger which should be executed on click.
	//
	// The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
	// oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
	// oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
	// oryPasskeyLogin WebAuthnTriggersPasskeyLogin
	// oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
	// oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
	// oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
	OnclickTrigger *UINodeInputAttributesOnclickTrigger `json:"onclickTrigger,omitempty"`

	// Onload OnLoad may contain javascript which should be executed on load. This is primarily
	// used for WebAuthn.
	//
	// Deprecated: Using OnLoad requires the use of eval() which is a security risk. Use OnLoadTrigger instead.
	Onload *string `json:"onload,omitempty"`

	// OnloadTrigger OnLoadTrigger may contain a WebAuthn trigger which should be executed on load.
	//
	// The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
	// oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
	// oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
	// oryPasskeyLogin WebAuthnTriggersPasskeyLogin
	// oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
	// oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
	// oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
	OnloadTrigger *UINodeInputAttributesOnloadTrigger `json:"onloadTrigger,omitempty"`

	// Pattern The input's pattern.
	Pattern *string `json:"pattern,omitempty"`

	// Required Mark this input field as required.
	Required *bool `json:"required,omitempty"`

	// Type The input's element type.
	// text InputAttributeTypeText
	// password InputAttributeTypePassword
	// number InputAttributeTypeNumber
	// checkbox InputAttributeTypeCheckbox
	// hidden InputAttributeTypeHidden
	// email InputAttributeTypeEmail
	// tel InputAttributeTypeTel
	// submit InputAttributeTypeSubmit
	// button InputAttributeTypeButton
	// datetime-local InputAttributeTypeDateTimeLocal
	// date InputAttributeTypeDate
	// url InputAttributeTypeURI
	Type UINodeInputAttributesType `json:"type"`

	// Value The input's value.
	Value *interface{} `json:"value"`
}

// UINodeInputAttributesAutocomplete The autocomplete attribute for the input.
// email InputAttributeAutocompleteEmail
// tel InputAttributeAutocompleteTel
// url InputAttributeAutocompleteUrl
// current-password InputAttributeAutocompleteCurrentPassword
// new-password InputAttributeAutocompleteNewPassword
// one-time-code InputAttributeAutocompleteOneTimeCode
type UINodeInputAttributesAutocomplete string

// UINodeInputAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "input".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeInputAttributesNodeType string

// UINodeInputAttributesOnclickTrigger OnClickTrigger may contain a WebAuthn trigger which should be executed on click.
//
// The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
// oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
// oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
// oryPasskeyLogin WebAuthnTriggersPasskeyLogin
// oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
// oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
// oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
type UINodeInputAttributesOnclickTrigger string

// UINodeInputAttributesOnloadTrigger OnLoadTrigger may contain a WebAuthn trigger which should be executed on load.
//
// The trigger maps to a JavaScript function provided by Ory, which triggers actions such as PassKey registration or login.
// oryWebAuthnRegistration WebAuthnTriggersWebAuthnRegistration
// oryWebAuthnLogin WebAuthnTriggersWebAuthnLogin
// oryPasskeyLogin WebAuthnTriggersPasskeyLogin
// oryPasskeyLoginAutocompleteInit WebAuthnTriggersPasskeyLoginAutocompleteInit
// oryPasskeyRegistration WebAuthnTriggersPasskeyRegistration
// oryPasskeySettingsRegistration WebAuthnTriggersPasskeySettingsRegistration
type UINodeInputAttributesOnloadTrigger string

// UINodeInputAttributesType The input's element type.
// text InputAttributeTypeText
// password InputAttributeTypePassword
// number InputAttributeTypeNumber
// checkbox InputAttributeTypeCheckbox
// hidden InputAttributeTypeHidden
// email InputAttributeTypeEmail
// tel InputAttributeTypeTel
// submit InputAttributeTypeSubmit
// button InputAttributeTypeButton
// datetime-local InputAttributeTypeDateTimeLocal
// date InputAttributeTypeDate
// url InputAttributeTypeURI
type UINodeInputAttributesType string

// UINodeMeta This might include a label and other information that can optionally
// be used to render UIs.
type UINodeMeta struct {
	Label *UIText `json:"label,omitempty"`
}

// UINodeScriptAttributes defines model for UiNodeScriptAttributes.
type UINodeScriptAttributes struct {
	// Async The script async type
	Async bool `json:"async"`

	// Crossorigin The script cross origin policy
	Crossorigin string `json:"crossorigin"`

	// ID A unique identifier
	ID string `json:"id"`

	// Integrity The script's integrity hash
	Integrity string `json:"integrity"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeScriptAttributesNodeType `json:"node_type"`

	// Nonce Nonce for CSP
	//
	// A nonce you may want to use to improve your Content Security Policy.
	// You do not have to use this value but if you want to improve your CSP
	// policies you may use it. You can also choose to use your own nonce value!
	Nonce string `json:"nonce"`

	// Referrerpolicy The script referrer policy
	Referrerpolicy string `json:"referrerpolicy"`

	// Src The script source
	Src string `json:"src"`

	// Type The script MIME type
	Type string `json:"type"`
}

// UINodeScriptAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0. In this struct it technically always is "script".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeScriptAttributesNodeType string

// UINodeTextAttributes defines model for UiNodeTextAttributes.
type UINodeTextAttributes struct {
	// ID A unique identifier
	ID string `json:"id"`

	// NodeType NodeType represents this node's types. It is a mirror of `node.type` and
	// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
	// text Text
	// input Input
	// img Image
	// a Anchor
	// script Script
	// div Division
	NodeType UINodeTextAttributesNodeType `json:"node_type"`
	Text     UIText                       `json:"text"`
}

// UINodeTextAttributesNodeType NodeType represents this node's types. It is a mirror of `node.type` and
// is primarily used to allow compatibility with OpenAPI 3.0.  In this struct it technically always is "text".
// text Text
// input Input
// img Image
// a Anchor
// script Script
// div Division
type UINodeTextAttributesNodeType string

// UINodes defines model for UiNodes.
type UINodes = []UINode

// UIText defines model for UiText.
type UIText struct {
	// Context The message's context. Useful when customizing messages.
	Context *map[string]interface{} `json:"context,omitempty"`
	ID      ID                      `json:"id"`

	// Text The message text. Written in american english.
	Text string `json:"text"`

	// Type The message type.
	// info Info
	// error Error
	// success Success
	Type UITextType `json:"type"`
}

// UITextType The message type.
// info Info
// error Error
// success Success
type UITextType string

// UITexts defines model for UiTexts.
type UITexts = []UIText

// UpdateIdentityBody Update Identity Body
type UpdateIdentityBody struct {
	// Credentials Create Identity and Import Credentials
	Credentials *IdentityWithCredentials `json:"credentials,omitempty"`

	// MetadataAdmin Store metadata about the user which is only accessible through admin APIs such as `GET /identities/<id>`.
	MetadataAdmin *interface{} `json:"metadata_admin,omitempty"`

	// MetadataPublic Store metadata about the identity which the identity itself can see when calling for example the
	// session endpoint. Do not store sensitive information (e.g. credit score) about the identity in this field.
	MetadataPublic *interface{} `json:"metadata_public,omitempty"`

	// SchemaID SchemaID is the ID of the JSON Schema to be used for validating the identity's traits. If set
	// will update the Identity's SchemaID.
	SchemaID string `json:"schema_id"`

	// State State is the identity's state.
	// active StateActive
	// inactive StateInactive
	State UpdateIdentityBodyState `json:"state"`

	// Traits Traits represent an identity's traits. The identity is able to create, modify, and delete traits
	// in a self-service manner. The input will always be validated against the JSON Schema defined
	// in `schema_id`.
	Traits map[string]interface{} `json:"traits"`
}

// UpdateIdentityBodyState State is the identity's state.
// active StateActive
// inactive StateInactive
type UpdateIdentityBodyState string

// UpdateLoginFlowBody defines model for UpdateLoginFlowBody.
type UpdateLoginFlowBody struct {
	union json.RawMessage
}

// UpdateLoginFlowWithCodeMethod Update Login flow using the code method
type UpdateLoginFlowWithCodeMethod struct {
	// Address Address is the address to send the code to, in case that there are multiple addresses. This field
	// is only used in two-factor flows and is ineffective for passwordless flows.
	Address *string `json:"address,omitempty"`

	// Code Code is the 6 digits code sent to the user
	Code *string `json:"code,omitempty"`

	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken string `json:"csrf_token"`

	// Identifier Identifier is the code identifier
	// The identifier requires that the user has already completed the registration or settings with code flow.
	Identifier *string `json:"identifier,omitempty"`

	// Method Method should be set to "code" when logging in using the code strategy.
	Method string `json:"method"`

	// Resend Resend is set when the user wants to resend the code
	Resend *string `json:"resend,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateLoginFlowWithIdentifierFirstMethod Update Login Flow with Multi-Step Method
type UpdateLoginFlowWithIdentifierFirstMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Identifier Identifier is the email or username of the user trying to log in.
	Identifier string `json:"identifier"`

	// Method Method should be set to "password" when logging in using the identifier and password strategy.
	Method string `json:"method"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateLoginFlowWithLookupSecretMethod Update Login Flow with Lookup Secret Method
type UpdateLoginFlowWithLookupSecretMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// LookupSecret The lookup secret.
	LookupSecret string `json:"lookup_secret"`

	// Method Method should be set to "lookup_secret" when logging in using the lookup_secret strategy.
	Method string `json:"method"`
}

// UpdateLoginFlowWithOidcMethod Update Login Flow with OpenID Connect Method
type UpdateLoginFlowWithOidcMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// IDToken IDToken is an optional id token provided by an OIDC provider
	//
	// If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
	// the OIDC credentials of the identity.
	// If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
	// the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.
	//
	// Supported providers are
	// Apple
	// Google
	IDToken *string `json:"id_token,omitempty"`

	// IDTokenNonce IDTokenNonce is the nonce, used when generating the IDToken.
	// If the provider supports nonce validation, the nonce will be validated against this value and required.
	IDTokenNonce *string `json:"id_token_nonce,omitempty"`

	// Method Method to use
	//
	// This field must be set to `oidc` when using the oidc method.
	Method string `json:"method"`

	// Provider The provider to register with
	Provider string `json:"provider"`

	// Traits The identity traits. This is a placeholder for the registration flow.
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// UpstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.
	//
	// These parameters are optional and depend on what the upstream identity provider supports.
	// Supported parameters are:
	// `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
	// `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
	// `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
	UpstreamParameters *map[string]interface{} `json:"upstream_parameters,omitempty"`
}

// UpdateLoginFlowWithPasskeyMethod Update Login Flow with Passkey Method
type UpdateLoginFlowWithPasskeyMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method should be set to "passkey" when logging in using the Passkey strategy.
	Method string `json:"method"`

	// PasskeyLogin Login a WebAuthn Security Key
	//
	// This must contain the ID of the WebAuthN connection.
	PasskeyLogin *string `json:"passkey_login,omitempty"`
}

// UpdateLoginFlowWithPasswordMethod Update Login Flow with Password Method
type UpdateLoginFlowWithPasswordMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Identifier Identifier is the email or username of the user trying to log in.
	Identifier string `json:"identifier"`

	// Method Method should be set to "password" when logging in using the identifier and password strategy.
	Method string `json:"method"`

	// Password The user's password.
	Password string `json:"password"`

	// PasswordIdentifier Identifier is the email or username of the user trying to log in.
	// This field is deprecated!
	PasswordIdentifier *string `json:"password_identifier,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateLoginFlowWithSamlMethod Update login flow using SAML
type UpdateLoginFlowWithSamlMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method to use
	//
	// This field must be set to `saml` when using the saml method.
	Method string `json:"method"`

	// Provider The provider to register with
	Provider string `json:"provider"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateLoginFlowWithTotpMethod Update Login Flow with TOTP Method
type UpdateLoginFlowWithTotpMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method should be set to "totp" when logging in using the TOTP strategy.
	Method string `json:"method"`

	// TotpCode The TOTP code.
	TotpCode string `json:"totp_code"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateLoginFlowWithWebAuthnMethod Update Login Flow with WebAuthn Method
type UpdateLoginFlowWithWebAuthnMethod struct {
	// CsrfToken Sending the anti-csrf token is only required for browser login flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Identifier Identifier is the email or username of the user trying to log in.
	Identifier string `json:"identifier"`

	// Method Method should be set to "webAuthn" when logging in using the WebAuthn strategy.
	Method string `json:"method"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// WebauthnLogin Login a WebAuthn Security Key
	//
	// This must contain the ID of the WebAuthN connection.
	WebauthnLogin *string `json:"webauthn_login,omitempty"`
}

// UpdateRegistrationFlowWithCodeMethod Update Registration Flow with Code Method
type UpdateRegistrationFlowWithCodeMethod struct {
	// Code The OTP Code sent to the user
	Code *string `json:"code,omitempty"`

	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method to use
	//
	// This field must be set to `code` when using the code method.
	Method string `json:"method"`

	// Resend Resend restarts the flow with a new code
	Resend *string `json:"resend,omitempty"`

	// Traits The identity's traits
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateRegistrationFlowWithOidcMethod Update Registration Flow with OpenID Connect Method
type UpdateRegistrationFlowWithOidcMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// IDToken IDToken is an optional id token provided by an OIDC provider
	//
	// If submitted, it is verified using the OIDC provider's public key set and the claims are used to populate
	// the OIDC credentials of the identity.
	// If the OIDC provider does not store additional claims (such as name, etc.) in the IDToken itself, you can use
	// the `traits` field to populate the identity's traits. Note, that Apple only includes the users email in the IDToken.
	//
	// Supported providers are
	// Apple
	// Google
	IDToken *string `json:"id_token,omitempty"`

	// IDTokenNonce IDTokenNonce is the nonce, used when generating the IDToken.
	// If the provider supports nonce validation, the nonce will be validated against this value and is required.
	IDTokenNonce *string `json:"id_token_nonce,omitempty"`

	// Method Method to use
	//
	// This field must be set to `oidc` when using the oidc method.
	Method string `json:"method"`

	// Provider The provider to register with
	Provider string `json:"provider"`

	// Traits The identity traits
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// UpstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.
	//
	// These parameters are optional and depend on what the upstream identity provider supports.
	// Supported parameters are:
	// `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
	// `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
	// `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
	UpstreamParameters *map[string]interface{} `json:"upstream_parameters,omitempty"`
}

// UpdateRegistrationFlowWithPasskeyMethod Update Registration Flow with Passkey Method
type UpdateRegistrationFlowWithPasskeyMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to "passkey" when trying to add, update, or remove a Passkey.
	Method string `json:"method"`

	// PasskeyRegister Register a WebAuthn Security Key
	//
	// It is expected that the JSON returned by the WebAuthn registration process
	// is included here.
	PasskeyRegister *string `json:"passkey_register,omitempty"`

	// Traits The identity's traits
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateRegistrationFlowWithPasswordMethod Update Registration Flow with Password Method
type UpdateRegistrationFlowWithPasswordMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method to use
	//
	// This field must be set to `password` when using the password method.
	Method string `json:"method"`

	// Password Password to sign the user up with
	Password string `json:"password"`

	// Traits The identity's traits
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateRegistrationFlowWithProfileMethod Update Registration Flow with Profile Method
type UpdateRegistrationFlowWithProfileMethod struct {
	// CsrfToken The Anti-CSRF Token
	//
	// This token is only required when performing browser flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to profile when trying to update a profile.
	Method string `json:"method"`

	// Screen Screen requests navigation to a previous screen.
	//
	// This must be set to credential-selection to go back to the credential
	// selection screen.
	// credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential
	// previous RegistrationScreenPrevious
	Screen *UpdateRegistrationFlowWithProfileMethodScreen `json:"screen,omitempty"`

	// Traits Traits
	//
	// The identity's traits.
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateRegistrationFlowWithProfileMethodScreen Screen requests navigation to a previous screen.
//
// This must be set to credential-selection to go back to the credential
// selection screen.
// credential-selection RegistrationScreenCredentialSelection nolint:gosec // not a credential
// previous RegistrationScreenPrevious
type UpdateRegistrationFlowWithProfileMethodScreen string

// UpdateRegistrationFlowWithSamlMethod Update registration flow using SAML
type UpdateRegistrationFlowWithSamlMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method to use
	//
	// This field must be set to `saml` when using the saml method.
	Method string `json:"method"`

	// Provider The provider to register with
	Provider string `json:"provider"`

	// Traits The identity traits
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateRegistrationFlowWithWebAuthnMethod Update Registration Flow with WebAuthn Method
type UpdateRegistrationFlowWithWebAuthnMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to "webauthn" when trying to add, update, or remove a webAuthn pairing.
	Method string `json:"method"`

	// Traits The identity's traits
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// WebauthnRegister Register a WebAuthn Security Key
	//
	// It is expected that the JSON returned by the WebAuthn registration process
	// is included here.
	WebauthnRegister *string `json:"webauthn_register,omitempty"`

	// WebauthnRegisterDisplayname Name of the WebAuthn Security Key to be Added
	//
	// A human-readable name for the security key which will be added.
	WebauthnRegisterDisplayname *string `json:"webauthn_register_displayname,omitempty"`
}

// UpdateSettingsFlowWithLookupMethod Update Settings Flow with Lookup Method
type UpdateSettingsFlowWithLookupMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// LookupSecretConfirm If set to true will save the regenerated lookup secrets
	LookupSecretConfirm *bool `json:"lookup_secret_confirm,omitempty"`

	// LookupSecretDisable Disables this method if true.
	LookupSecretDisable *bool `json:"lookup_secret_disable,omitempty"`

	// LookupSecretRegenerate If set to true will regenerate the lookup secrets
	LookupSecretRegenerate *bool `json:"lookup_secret_regenerate,omitempty"`

	// LookupSecretReveal If set to true will reveal the lookup secrets
	LookupSecretReveal *bool `json:"lookup_secret_reveal,omitempty"`

	// Method Method
	//
	// Should be set to "lookup" when trying to add, update, or remove a lookup pairing.
	Method string `json:"method"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateSettingsFlowWithOidcMethod Update Settings Flow with OpenID Connect Method
type UpdateSettingsFlowWithOidcMethod struct {
	// Flow Flow ID is the flow's ID.
	//
	// in: query
	Flow *string `json:"flow,omitempty"`

	// Link Link this provider
	//
	// Either this or `unlink` must be set.
	//
	// type: string
	// in: body
	Link *string `json:"link,omitempty"`

	// Method Method
	//
	// Should be set to profile when trying to update a profile.
	Method string `json:"method"`

	// Traits The identity's traits
	//
	// in: body
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// Unlink Unlink this provider
	//
	// Either this or `link` must be set.
	//
	// type: string
	// in: body
	Unlink *string `json:"unlink,omitempty"`

	// UpstreamParameters UpstreamParameters are the parameters that are passed to the upstream identity provider.
	//
	// These parameters are optional and depend on what the upstream identity provider supports.
	// Supported parameters are:
	// `login_hint` (string): The `login_hint` parameter suppresses the account chooser and either pre-fills the email box on the sign-in form, or selects the proper session.
	// `hd` (string): The `hd` parameter limits the login/registration process to a Google Organization, e.g. `mycollege.edu`.
	// `prompt` (string): The `prompt` specifies whether the Authorization Server prompts the End-User for reauthentication and consent, e.g. `select_account`.
	UpstreamParameters *map[string]interface{} `json:"upstream_parameters,omitempty"`
}

// UpdateSettingsFlowWithPasskeyMethod Update Settings Flow with Passkey Method
type UpdateSettingsFlowWithPasskeyMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to "passkey" when trying to add, update, or remove a webAuthn pairing.
	Method string `json:"method"`

	// PasskeyRemove Remove a WebAuthn Security Key
	//
	// This must contain the ID of the WebAuthN connection.
	PasskeyRemove *string `json:"passkey_remove,omitempty"`

	// PasskeySettingsRegister Register a WebAuthn Security Key
	//
	// It is expected that the JSON returned by the WebAuthn registration process
	// is included here.
	PasskeySettingsRegister *string `json:"passkey_settings_register,omitempty"`
}

// UpdateSettingsFlowWithPasswordMethod Update Settings Flow with Password Method
type UpdateSettingsFlowWithPasswordMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to password when trying to update a password.
	Method string `json:"method"`

	// Password Password is the updated password
	Password string `json:"password"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateSettingsFlowWithProfileMethod Update Settings Flow with Profile Method
type UpdateSettingsFlowWithProfileMethod struct {
	// CsrfToken The Anti-CSRF Token
	//
	// This token is only required when performing browser flows.
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to profile when trying to update a profile.
	Method string `json:"method"`

	// Traits Traits
	//
	// The identity's traits.
	Traits map[string]interface{} `json:"traits"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateSettingsFlowWithSamlMethod Update settings flow using SAML
type UpdateSettingsFlowWithSamlMethod struct {
	// CsrfToken The CSRF Token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Flow Flow ID is the flow's ID.
	//
	// in: query
	Flow *string `json:"flow,omitempty"`

	// Link Link this provider
	//
	// Either this or `unlink` must be set.
	//
	// type: string
	// in: body
	Link *string `json:"link,omitempty"`

	// Method Method
	//
	// Should be set to saml when trying to update a profile.
	Method string `json:"method"`

	// Traits The identity's traits
	//
	// in: body
	Traits *map[string]interface{} `json:"traits,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// Unlink Unlink this provider
	//
	// Either this or `link` must be set.
	//
	// type: string
	// in: body
	Unlink *string `json:"unlink,omitempty"`
}

// UpdateSettingsFlowWithTotpMethod Update Settings Flow with TOTP Method
type UpdateSettingsFlowWithTotpMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to "totp" when trying to add, update, or remove a totp pairing.
	Method string `json:"method"`

	// TotpCode ValidationTOTP must contain a valid TOTP based on the
	TotpCode *string `json:"totp_code,omitempty"`

	// TotpUnlink UnlinkTOTP if true will remove the TOTP pairing,
	// effectively removing the credential. This can be used
	// to set up a new TOTP device.
	TotpUnlink *bool `json:"totp_unlink,omitempty"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`
}

// UpdateSettingsFlowWithWebAuthnMethod Update Settings Flow with WebAuthn Method
type UpdateSettingsFlowWithWebAuthnMethod struct {
	// CsrfToken CSRFToken is the anti-CSRF token
	CsrfToken *string `json:"csrf_token,omitempty"`

	// Method Method
	//
	// Should be set to "webauthn" when trying to add, update, or remove a webAuthn pairing.
	Method string `json:"method"`

	// TransientPayload Transient data to pass along to any webhooks
	TransientPayload *map[string]interface{} `json:"transient_payload,omitempty"`

	// WebauthnRegister Register a WebAuthn Security Key
	//
	// It is expected that the JSON returned by the WebAuthn registration process
	// is included here.
	WebauthnRegister *string `json:"webauthn_register,omitempty"`

	// WebauthnRegisterDisplayname Name of the WebAuthn Security Key to be Added
	//
	// A human-readable name for the security key which will be added.
	WebauthnRegisterDisplayname *string `json:"webauthn_register_displayname,omitempty"`

	// WebauthnRemove Remove a WebAuthn Security Key
	//
	// This must contain the ID of the WebAuthN connection.
	WebauthnRemove *string `json:"webauthn_remove,omitempty"`
}

// VerifiableCredentialPrimingResponse defines model for VerifiableCredentialPrimingResponse.
type VerifiableCredentialPrimingResponse struct {
	CNonce           *string `json:"c_nonce,omitempty"`
	CNonceExpiresIn  *int64  `json:"c_nonce_expires_in,omitempty"`
	Error            *string `json:"error,omitempty"`
	ErrorDebug       *string `json:"error_debug,omitempty"`
	ErrorDescription *string `json:"error_description,omitempty"`
	ErrorHint        *string `json:"error_hint,omitempty"`
	Format           *string `json:"format,omitempty"`
	StatusCode       *int64  `json:"status_code,omitempty"`
}

// VerifiableCredentialProof defines model for VerifiableCredentialProof.
type VerifiableCredentialProof struct {
	Jwt       *string `json:"jwt,omitempty"`
	ProofType *string `json:"proof_type,omitempty"`
}

// VerifiableCredentialResponse defines model for VerifiableCredentialResponse.
type VerifiableCredentialResponse struct {
	CredentialDraft00 *string `json:"credential_draft_00,omitempty"`
	Format            *string `json:"format,omitempty"`
}

// VerifiableIdentityAddress VerifiableAddress is an identity's verifiable address
type VerifiableIdentityAddress struct {
	// CreatedAt When this entry was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// ID The ID
	ID *openapi_types.UUID `json:"id,omitempty"`

	// Status VerifiableAddressStatus must not exceed 16 characters as that is the limitation in the SQL Schema
	Status IdentityVerifiableAddressStatus `json:"status"`

	// UpdatedAt When this entry was last updated
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Value The address value
	//
	// example foo@user.com
	Value string `json:"value"`

	// Verified Indicates if the address has already been verified
	Verified   bool      `json:"verified"`
	VerifiedAt *NullTime `json:"verified_at"`

	// Via The delivery method
	Via VerifiableIdentityAddressVia `json:"via"`
}

// VerifiableIdentityAddressVia The delivery method
type VerifiableIdentityAddressVia string

// GenericError defines model for GenericError.
type GenericError = Error

// NotFoundError defines model for NotFoundError.
type NotFoundError = Error

// UnexpectedError defines model for UnexpectedError.
type UnexpectedError = Error

// ListCourierMessagesParams defines parameters for ListCourierMessages.
type ListCourierMessagesParams struct {
	// PageSize This is the number of items per page to return.
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken The next page token.
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// Status Status filters out messages based on status.
	// If no value is provided, it doesn't take effect on filter.
	Status *CourierMessageStatus `form:"status,omitempty" json:"status,omitempty"`

	// Recipient Recipient filters out messages based on recipient.
	// If no value is provided, it doesn't take effect on filter.
	Recipient *string `form:"recipient,omitempty" json:"recipient,omitempty"`
}

// ListIdentitiesParams defines parameters for ListIdentities.
type ListIdentitiesParams struct {
	// PageSize Page Size
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken Next Page Token
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// Consistency Read Consistency Level (cloud only)
	Consistency *ListIdentitiesParamsConsistency `form:"consistency,omitempty" json:"consistency,omitempty"`

	// Ids Retrieve multiple identities by their IDs.
	// This parameter has the following limitations:
	// Duplicate or non-existent IDs are ignored.
	// The order of returned IDs may be different from the request.
	// This filter does not support pagination. You must implement your own pagination as the maximum number of items returned by this endpoint may not exceed a certain threshold (currently 500).
	Ids *[]string `form:"ids,omitempty" json:"ids,omitempty"`

	// CredentialsIdentifier CredentialsIdentifier is the identifier (username, email) of the credentials to look up using exact match.
	// Only one of CredentialsIdentifier and CredentialsIdentifierSimilar can be used.
	CredentialsIdentifier *string `form:"credentials_identifier,omitempty" json:"credentials_identifier,omitempty"`

	// PreviewCredentialsIdentifierSimilar This is an EXPERIMENTAL parameter that WILL CHANGE. Do NOT rely on consistent, deterministic behavior.
	// THIS PARAMETER WILL BE REMOVED IN AN UPCOMING RELEASE WITHOUT ANY MIGRATION PATH.
	// CredentialsIdentifierSimilar is the (partial) identifier (username, email) of the credentials to look up using similarity search.
	// Only one of CredentialsIdentifier and CredentialsIdentifierSimilar can be used.
	PreviewCredentialsIdentifierSimilar *string `form:"preview_credentials_identifier_similar,omitempty" json:"preview_credentials_identifier_similar,omitempty"`

	// IncludeCredential Include Credentials in Response
	// Include any credential, for example `password` or `oidc`, in the response. When set to `oidc`, This will return
	// the initial OAuth 2.0 Access Token, OAuth 2.0 Refresh Token and the OpenID Connect ID Token if available.
	IncludeCredential *[]string `form:"include_credential,omitempty" json:"include_credential,omitempty"`

	// OrganizationID List identities that belong to a specific organization.
	OrganizationID *string `form:"organization_id,omitempty" json:"organization_id,omitempty"`
}

// ListIdentitiesParamsConsistency defines parameters for ListIdentities.
type ListIdentitiesParamsConsistency string

// GetIdentityParams defines parameters for GetIdentity.
type GetIdentityParams struct {
	// IncludeCredential Include Credentials in Response
	// Include any credential, for example `password` or `oidc`, in the response. When set to `oidc`, This will return
	// the initial OAuth 2.0 Access Token, OAuth 2.0 Refresh Token and the OpenID Connect ID Token if available.
	IncludeCredential *[]GetIdentityParamsIncludeCredential `form:"include_credential,omitempty" json:"include_credential,omitempty"`
}

// GetIdentityParamsIncludeCredential defines parameters for GetIdentity.
type GetIdentityParamsIncludeCredential string

// DeleteIdentityCredentialsParams defines parameters for DeleteIdentityCredentials.
type DeleteIdentityCredentialsParams struct {
	// Identifier Identifier is the identifier of the OIDC credential to delete.
	// Find the identifier by calling the `GET /identities/{id}?include_credential=oidc` endpoint.
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty"`
}

// DeleteIdentityCredentialsParamsType defines parameters for DeleteIdentityCredentials.
type DeleteIdentityCredentialsParamsType string

// ListIdentitySessionsParams defines parameters for ListIdentitySessions.
type ListIdentitySessionsParams struct {
	// PageSize Page Size
	// This is the number of items per page to return. For details on pagination please head over to the
	// [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken Next Page Token
	// The next page token. For details on pagination please head over to the
	// [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// Active Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
	Active *bool `form:"active,omitempty" json:"active,omitempty"`
}

// CreateRecoveryLinkForIdentityParams defines parameters for CreateRecoveryLinkForIdentity.
type CreateRecoveryLinkForIdentityParams struct {
	ReturnTo *string `form:"return_to,omitempty" json:"return_to,omitempty"`
}

// ListIdentitySchemasParams defines parameters for ListIdentitySchemas.
type ListIdentitySchemasParams struct {
	// PageSize Page Size
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken Next Page Token
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// ListSessionsParams defines parameters for ListSessions.
type ListSessionsParams struct {
	// PageSize Items per Page
	// This is the number of items per page to return.
	// For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
	PageSize *int64 `form:"page_size,omitempty" json:"page_size,omitempty"`

	// PageToken Next Page Token
	// The next page token.
	// For details on pagination please head over to the [pagination documentation](https://www.ory.sh/docs/ecosystem/api-design#pagination).
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// Active Active is a boolean flag that filters out sessions based on the state. If no value is provided, all sessions are returned.
	Active *bool `form:"active,omitempty" json:"active,omitempty"`

	// Expand ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session.
	// If no value is provided, the expandable properties are skipped.
	Expand *[]ListSessionsParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// ListSessionsParamsExpand defines parameters for ListSessions.
type ListSessionsParamsExpand string

// GetSessionParams defines parameters for GetSession.
type GetSessionParams struct {
	// Expand ExpandOptions is a query parameter encoded list of all properties that must be expanded in the Session.
	// Example - ?expand=Identity&expand=Devices
	// If no value is provided, the expandable properties are skipped.
	Expand *[]GetSessionParamsExpand `form:"expand,omitempty" json:"expand,omitempty"`
}

// GetSessionParamsExpand defines parameters for GetSession.
type GetSessionParamsExpand string

// BatchPatchIdentitiesJSONRequestBody defines body for BatchPatchIdentities for application/json ContentType.
type BatchPatchIdentitiesJSONRequestBody = PatchIdentitiesBody

// CreateIdentityJSONRequestBody defines body for CreateIdentity for application/json ContentType.
type CreateIdentityJSONRequestBody = CreateIdentityBody

// PatchIdentityJSONRequestBody defines body for PatchIdentity for application/json ContentType.
type PatchIdentityJSONRequestBody = JSONPatchDocument

// UpdateIdentityJSONRequestBody defines body for UpdateIdentity for application/json ContentType.
type UpdateIdentityJSONRequestBody = UpdateIdentityBody

// CreateRecoveryCodeForIdentityJSONRequestBody defines body for CreateRecoveryCodeForIdentity for application/json ContentType.
type CreateRecoveryCodeForIdentityJSONRequestBody = CreateRecoveryCodeForIdentityBody

// CreateRecoveryLinkForIdentityJSONRequestBody defines body for CreateRecoveryLinkForIdentity for application/json ContentType.
type CreateRecoveryLinkForIdentityJSONRequestBody = CreateRecoveryLinkForIdentityBody

// AsUINodeInputAttributes returns the union data inside the UINodeAttributes as a UINodeInputAttributes
func (t UINodeAttributes) AsUINodeInputAttributes() (UINodeInputAttributes, error) {
	var body UINodeInputAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeInputAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeInputAttributes
func (t *UINodeAttributes) FromUINodeInputAttributes(v UINodeInputAttributes) error {
	v.NodeType = "input"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeInputAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeInputAttributes
func (t *UINodeAttributes) MergeUINodeInputAttributes(v UINodeInputAttributes) error {
	v.NodeType = "input"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUINodeTextAttributes returns the union data inside the UINodeAttributes as a UINodeTextAttributes
func (t UINodeAttributes) AsUINodeTextAttributes() (UINodeTextAttributes, error) {
	var body UINodeTextAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeTextAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeTextAttributes
func (t *UINodeAttributes) FromUINodeTextAttributes(v UINodeTextAttributes) error {
	v.NodeType = "text"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeTextAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeTextAttributes
func (t *UINodeAttributes) MergeUINodeTextAttributes(v UINodeTextAttributes) error {
	v.NodeType = "text"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUINodeImageAttributes returns the union data inside the UINodeAttributes as a UINodeImageAttributes
func (t UINodeAttributes) AsUINodeImageAttributes() (UINodeImageAttributes, error) {
	var body UINodeImageAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeImageAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeImageAttributes
func (t *UINodeAttributes) FromUINodeImageAttributes(v UINodeImageAttributes) error {
	v.NodeType = "img"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeImageAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeImageAttributes
func (t *UINodeAttributes) MergeUINodeImageAttributes(v UINodeImageAttributes) error {
	v.NodeType = "img"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUINodeAnchorAttributes returns the union data inside the UINodeAttributes as a UINodeAnchorAttributes
func (t UINodeAttributes) AsUINodeAnchorAttributes() (UINodeAnchorAttributes, error) {
	var body UINodeAnchorAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeAnchorAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeAnchorAttributes
func (t *UINodeAttributes) FromUINodeAnchorAttributes(v UINodeAnchorAttributes) error {
	v.NodeType = "a"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeAnchorAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeAnchorAttributes
func (t *UINodeAttributes) MergeUINodeAnchorAttributes(v UINodeAnchorAttributes) error {
	v.NodeType = "a"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUINodeScriptAttributes returns the union data inside the UINodeAttributes as a UINodeScriptAttributes
func (t UINodeAttributes) AsUINodeScriptAttributes() (UINodeScriptAttributes, error) {
	var body UINodeScriptAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeScriptAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeScriptAttributes
func (t *UINodeAttributes) FromUINodeScriptAttributes(v UINodeScriptAttributes) error {
	v.NodeType = "script"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeScriptAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeScriptAttributes
func (t *UINodeAttributes) MergeUINodeScriptAttributes(v UINodeScriptAttributes) error {
	v.NodeType = "script"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUINodeDivisionAttributes returns the union data inside the UINodeAttributes as a UINodeDivisionAttributes
func (t UINodeAttributes) AsUINodeDivisionAttributes() (UINodeDivisionAttributes, error) {
	var body UINodeDivisionAttributes
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUINodeDivisionAttributes overwrites any union data inside the UINodeAttributes as the provided UINodeDivisionAttributes
func (t *UINodeAttributes) FromUINodeDivisionAttributes(v UINodeDivisionAttributes) error {
	v.NodeType = "div"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUINodeDivisionAttributes performs a merge with any union data inside the UINodeAttributes, using the provided UINodeDivisionAttributes
func (t *UINodeAttributes) MergeUINodeDivisionAttributes(v UINodeDivisionAttributes) error {
	v.NodeType = "div"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UINodeAttributes) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"node_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UINodeAttributes) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "a":
		return t.AsUINodeAnchorAttributes()
	case "div":
		return t.AsUINodeDivisionAttributes()
	case "img":
		return t.AsUINodeImageAttributes()
	case "input":
		return t.AsUINodeInputAttributes()
	case "script":
		return t.AsUINodeScriptAttributes()
	case "text":
		return t.AsUINodeTextAttributes()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UINodeAttributes) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UINodeAttributes) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUpdateLoginFlowWithPasswordMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithPasswordMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithPasswordMethod() (UpdateLoginFlowWithPasswordMethod, error) {
	var body UpdateLoginFlowWithPasswordMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithPasswordMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithPasswordMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithPasswordMethod(v UpdateLoginFlowWithPasswordMethod) error {
	v.Method = "password"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithPasswordMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithPasswordMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithPasswordMethod(v UpdateLoginFlowWithPasswordMethod) error {
	v.Method = "password"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithOidcMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithOidcMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithOidcMethod() (UpdateLoginFlowWithOidcMethod, error) {
	var body UpdateLoginFlowWithOidcMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithOidcMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithOidcMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithOidcMethod(v UpdateLoginFlowWithOidcMethod) error {
	v.Method = "oidc"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithOidcMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithOidcMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithOidcMethod(v UpdateLoginFlowWithOidcMethod) error {
	v.Method = "oidc"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithSamlMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithSamlMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithSamlMethod() (UpdateLoginFlowWithSamlMethod, error) {
	var body UpdateLoginFlowWithSamlMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithSamlMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithSamlMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithSamlMethod(v UpdateLoginFlowWithSamlMethod) error {
	v.Method = "saml"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithSamlMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithSamlMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithSamlMethod(v UpdateLoginFlowWithSamlMethod) error {
	v.Method = "saml"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithTotpMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithTotpMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithTotpMethod() (UpdateLoginFlowWithTotpMethod, error) {
	var body UpdateLoginFlowWithTotpMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithTotpMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithTotpMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithTotpMethod(v UpdateLoginFlowWithTotpMethod) error {
	v.Method = "totp"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithTotpMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithTotpMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithTotpMethod(v UpdateLoginFlowWithTotpMethod) error {
	v.Method = "totp"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithWebAuthnMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithWebAuthnMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithWebAuthnMethod() (UpdateLoginFlowWithWebAuthnMethod, error) {
	var body UpdateLoginFlowWithWebAuthnMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithWebAuthnMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithWebAuthnMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithWebAuthnMethod(v UpdateLoginFlowWithWebAuthnMethod) error {
	v.Method = "webauthn"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithWebAuthnMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithWebAuthnMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithWebAuthnMethod(v UpdateLoginFlowWithWebAuthnMethod) error {
	v.Method = "webauthn"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithLookupSecretMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithLookupSecretMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithLookupSecretMethod() (UpdateLoginFlowWithLookupSecretMethod, error) {
	var body UpdateLoginFlowWithLookupSecretMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithLookupSecretMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithLookupSecretMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithLookupSecretMethod(v UpdateLoginFlowWithLookupSecretMethod) error {
	v.Method = "lookup_secret"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithLookupSecretMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithLookupSecretMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithLookupSecretMethod(v UpdateLoginFlowWithLookupSecretMethod) error {
	v.Method = "lookup_secret"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithCodeMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithCodeMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithCodeMethod() (UpdateLoginFlowWithCodeMethod, error) {
	var body UpdateLoginFlowWithCodeMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithCodeMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithCodeMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithCodeMethod(v UpdateLoginFlowWithCodeMethod) error {
	v.Method = "code"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithCodeMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithCodeMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithCodeMethod(v UpdateLoginFlowWithCodeMethod) error {
	v.Method = "code"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithPasskeyMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithPasskeyMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithPasskeyMethod() (UpdateLoginFlowWithPasskeyMethod, error) {
	var body UpdateLoginFlowWithPasskeyMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithPasskeyMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithPasskeyMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithPasskeyMethod(v UpdateLoginFlowWithPasskeyMethod) error {
	v.Method = "passkey"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithPasskeyMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithPasskeyMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithPasskeyMethod(v UpdateLoginFlowWithPasskeyMethod) error {
	v.Method = "passkey"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUpdateLoginFlowWithIdentifierFirstMethod returns the union data inside the UpdateLoginFlowBody as a UpdateLoginFlowWithIdentifierFirstMethod
func (t UpdateLoginFlowBody) AsUpdateLoginFlowWithIdentifierFirstMethod() (UpdateLoginFlowWithIdentifierFirstMethod, error) {
	var body UpdateLoginFlowWithIdentifierFirstMethod
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUpdateLoginFlowWithIdentifierFirstMethod overwrites any union data inside the UpdateLoginFlowBody as the provided UpdateLoginFlowWithIdentifierFirstMethod
func (t *UpdateLoginFlowBody) FromUpdateLoginFlowWithIdentifierFirstMethod(v UpdateLoginFlowWithIdentifierFirstMethod) error {
	v.Method = "identifier_first"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUpdateLoginFlowWithIdentifierFirstMethod performs a merge with any union data inside the UpdateLoginFlowBody, using the provided UpdateLoginFlowWithIdentifierFirstMethod
func (t *UpdateLoginFlowBody) MergeUpdateLoginFlowWithIdentifierFirstMethod(v UpdateLoginFlowWithIdentifierFirstMethod) error {
	v.Method = "identifier_first"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UpdateLoginFlowBody) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"method"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t UpdateLoginFlowBody) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "code":
		return t.AsUpdateLoginFlowWithCodeMethod()
	case "identifier_first":
		return t.AsUpdateLoginFlowWithIdentifierFirstMethod()
	case "lookup_secret":
		return t.AsUpdateLoginFlowWithLookupSecretMethod()
	case "oidc":
		return t.AsUpdateLoginFlowWithOidcMethod()
	case "passkey":
		return t.AsUpdateLoginFlowWithPasskeyMethod()
	case "password":
		return t.AsUpdateLoginFlowWithPasswordMethod()
	case "saml":
		return t.AsUpdateLoginFlowWithSamlMethod()
	case "totp":
		return t.AsUpdateLoginFlowWithTotpMethod()
	case "webauthn":
		return t.AsUpdateLoginFlowWithWebAuthnMethod()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t UpdateLoginFlowBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UpdateLoginFlowBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Messages
	// (GET /courier/messages)
	ListCourierMessages(ctx echo.Context, params ListCourierMessagesParams) error
	// Get a Message
	// (GET /courier/messages/{id})
	GetCourierMessage(ctx echo.Context, id string) error
	// Check if server is healthy
	// (GET /health/alive)
	GetHealthAlive(ctx echo.Context) error
	// Check if server is ready
	// (GET /health/ready)
	GetHealthReady(ctx echo.Context) error
	// List Identities
	// (GET /identities)
	ListIdentities(ctx echo.Context, params ListIdentitiesParams) error
	// Create multiple identities
	// (PATCH /identities)
	BatchPatchIdentities(ctx echo.Context) error
	// Create an Identity
	// (POST /identities)
	CreateIdentity(ctx echo.Context) error
	// Delete an Identity
	// (DELETE /identities/{id})
	DeleteIdentity(ctx echo.Context, id string) error
	// Get an Identity
	// (GET /identities/{id})
	GetIdentity(ctx echo.Context, id string, params GetIdentityParams) error
	// Patch an Identity
	// (PATCH /identities/{id})
	PatchIdentity(ctx echo.Context, id string) error
	// Update an Identity
	// (PUT /identities/{id})
	UpdateIdentity(ctx echo.Context, id string) error
	// Delete a credential for a specific identity
	// (DELETE /identities/{id}/credentials/{type})
	DeleteIdentityCredentials(ctx echo.Context, id string, pType DeleteIdentityCredentialsParamsType, params DeleteIdentityCredentialsParams) error
	// Delete & Invalidate an Identity's Sessions
	// (DELETE /identities/{id}/sessions)
	DeleteIdentitySessions(ctx echo.Context, id string) error
	// List an Identity's Sessions
	// (GET /identities/{id}/sessions)
	ListIdentitySessions(ctx echo.Context, id string, params ListIdentitySessionsParams) error
	// Return game stats for user
	// (GET /juicer/game-stats/{user_id})
	GetGameStats(ctx echo.Context, userID openapi_types.UUID) error
	// Return game time categories
	// (GET /juicer/game-time-categories)
	ListGameTimeCategories(ctx echo.Context) error
	// Return game time kinds
	// (GET /juicer/game-time-kinds)
	ListGameTimeKinds(ctx echo.Context) error
	// Return game variants
	// (GET /juicer/game-variants)
	ListGameVariants(ctx echo.Context) error
	// Return quick games
	// (GET /juicer/quick-games)
	ListQuickGames(ctx echo.Context) error
	// Create a Recovery Code
	// (POST /recovery/code)
	CreateRecoveryCodeForIdentity(ctx echo.Context) error
	// Create a Recovery Link
	// (POST /recovery/link)
	CreateRecoveryLinkForIdentity(ctx echo.Context, params CreateRecoveryLinkForIdentityParams) error
	// Get all Identity Schemas
	// (GET /schemas)
	ListIdentitySchemas(ctx echo.Context, params ListIdentitySchemasParams) error
	// Get Identity JSON Schema
	// (GET /schemas/{id})
	GetIdentitySchema(ctx echo.Context, id string) error
	// List All Sessions
	// (GET /sessions)
	ListSessions(ctx echo.Context, params ListSessionsParams) error
	// Deactivate a Session
	// (DELETE /sessions/{id})
	DisableSession(ctx echo.Context, id string) error
	// Get Session
	// (GET /sessions/{id})
	GetSession(ctx echo.Context, id string, params GetSessionParams) error
	// Extend a Session
	// (PATCH /sessions/{id}/extend)
	ExtendSession(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListCourierMessages converts echo context to params.
func (w *ServerInterfaceWrapper) ListCourierMessages(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCourierMessagesParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// ------------- Optional query parameter "recipient" -------------

	err = runtime.BindQueryParameter("form", true, false, "recipient", ctx.QueryParams(), &params.Recipient)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter recipient: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListCourierMessages(ctx, params)
	return err
}

// GetCourierMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourierMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCourierMessage(ctx, id)
	return err
}

// GetHealthAlive converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthAlive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthAlive(ctx)
	return err
}

// GetHealthReady converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealthReady(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealthReady(ctx)
	return err
}

// ListIdentities converts echo context to params.
func (w *ServerInterfaceWrapper) ListIdentities(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIdentitiesParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "consistency" -------------

	err = runtime.BindQueryParameter("form", true, false, "consistency", ctx.QueryParams(), &params.Consistency)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter consistency: %s", err))
	}

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids: %s", err))
	}

	// ------------- Optional query parameter "credentials_identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "credentials_identifier", ctx.QueryParams(), &params.CredentialsIdentifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter credentials_identifier: %s", err))
	}

	// ------------- Optional query parameter "preview_credentials_identifier_similar" -------------

	err = runtime.BindQueryParameter("form", true, false, "preview_credentials_identifier_similar", ctx.QueryParams(), &params.PreviewCredentialsIdentifierSimilar)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter preview_credentials_identifier_similar: %s", err))
	}

	// ------------- Optional query parameter "include_credential" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_credential", ctx.QueryParams(), &params.IncludeCredential)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_credential: %s", err))
	}

	// ------------- Optional query parameter "organization_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "organization_id", ctx.QueryParams(), &params.OrganizationID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organization_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIdentities(ctx, params)
	return err
}

// BatchPatchIdentities converts echo context to params.
func (w *ServerInterfaceWrapper) BatchPatchIdentities(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BatchPatchIdentities(ctx)
	return err
}

// CreateIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIdentity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateIdentity(ctx)
	return err
}

// DeleteIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIdentity(ctx, id)
	return err
}

// GetIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetIdentityParams
	// ------------- Optional query parameter "include_credential" -------------

	err = runtime.BindQueryParameter("form", true, false, "include_credential", ctx.QueryParams(), &params.IncludeCredential)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter include_credential: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIdentity(ctx, id, params)
	return err
}

// PatchIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) PatchIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchIdentity(ctx, id)
	return err
}

// UpdateIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIdentity(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateIdentity(ctx, id)
	return err
}

// DeleteIdentityCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdentityCredentials(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "type" -------------
	var pType DeleteIdentityCredentialsParamsType

	err = runtime.BindStyledParameterWithOptions("simple", "type", ctx.Param("type"), &pType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteIdentityCredentialsParams
	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", ctx.QueryParams(), &params.Identifier)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter identifier: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIdentityCredentials(ctx, id, pType, params)
	return err
}

// DeleteIdentitySessions converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIdentitySessions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteIdentitySessions(ctx, id)
	return err
}

// ListIdentitySessions converts echo context to params.
func (w *ServerInterfaceWrapper) ListIdentitySessions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIdentitySessionsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIdentitySessions(ctx, id, params)
	return err
}

// GetGameStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetGameStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userID openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGameStats(ctx, userID)
	return err
}

// ListGameTimeCategories converts echo context to params.
func (w *ServerInterfaceWrapper) ListGameTimeCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListGameTimeCategories(ctx)
	return err
}

// ListGameTimeKinds converts echo context to params.
func (w *ServerInterfaceWrapper) ListGameTimeKinds(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListGameTimeKinds(ctx)
	return err
}

// ListGameVariants converts echo context to params.
func (w *ServerInterfaceWrapper) ListGameVariants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListGameVariants(ctx)
	return err
}

// ListQuickGames converts echo context to params.
func (w *ServerInterfaceWrapper) ListQuickGames(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListQuickGames(ctx)
	return err
}

// CreateRecoveryCodeForIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecoveryCodeForIdentity(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecoveryCodeForIdentity(ctx)
	return err
}

// CreateRecoveryLinkForIdentity converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRecoveryLinkForIdentity(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateRecoveryLinkForIdentityParams
	// ------------- Optional query parameter "return_to" -------------

	err = runtime.BindQueryParameter("form", true, false, "return_to", ctx.QueryParams(), &params.ReturnTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter return_to: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRecoveryLinkForIdentity(ctx, params)
	return err
}

// ListIdentitySchemas converts echo context to params.
func (w *ServerInterfaceWrapper) ListIdentitySchemas(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIdentitySchemasParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListIdentitySchemas(ctx, params)
	return err
}

// GetIdentitySchema converts echo context to params.
func (w *ServerInterfaceWrapper) GetIdentitySchema(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIdentitySchema(ctx, id)
	return err
}

// ListSessions converts echo context to params.
func (w *ServerInterfaceWrapper) ListSessions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSessionsParams
	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_size: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "active" -------------

	err = runtime.BindQueryParameter("form", true, false, "active", ctx.QueryParams(), &params.Active)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter active: %s", err))
	}

	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListSessions(ctx, params)
	return err
}

// DisableSession converts echo context to params.
func (w *ServerInterfaceWrapper) DisableSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DisableSession(ctx, id)
	return err
}

// GetSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSessionParams
	// ------------- Optional query parameter "expand" -------------

	err = runtime.BindQueryParameter("form", true, false, "expand", ctx.QueryParams(), &params.Expand)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter expand: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSession(ctx, id, params)
	return err
}

// ExtendSession converts echo context to params.
func (w *ServerInterfaceWrapper) ExtendSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ExtendSession(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/courier/messages", wrapper.ListCourierMessages)
	router.GET(baseURL+"/courier/messages/:id", wrapper.GetCourierMessage)
	router.GET(baseURL+"/health/alive", wrapper.GetHealthAlive)
	router.GET(baseURL+"/health/ready", wrapper.GetHealthReady)
	router.GET(baseURL+"/identities", wrapper.ListIdentities)
	router.PATCH(baseURL+"/identities", wrapper.BatchPatchIdentities)
	router.POST(baseURL+"/identities", wrapper.CreateIdentity)
	router.DELETE(baseURL+"/identities/:id", wrapper.DeleteIdentity)
	router.GET(baseURL+"/identities/:id", wrapper.GetIdentity)
	router.PATCH(baseURL+"/identities/:id", wrapper.PatchIdentity)
	router.PUT(baseURL+"/identities/:id", wrapper.UpdateIdentity)
	router.DELETE(baseURL+"/identities/:id/credentials/:type", wrapper.DeleteIdentityCredentials)
	router.DELETE(baseURL+"/identities/:id/sessions", wrapper.DeleteIdentitySessions)
	router.GET(baseURL+"/identities/:id/sessions", wrapper.ListIdentitySessions)
	router.GET(baseURL+"/juicer/game-stats/:user_id", wrapper.GetGameStats)
	router.GET(baseURL+"/juicer/game-time-categories", wrapper.ListGameTimeCategories)
	router.GET(baseURL+"/juicer/game-time-kinds", wrapper.ListGameTimeKinds)
	router.GET(baseURL+"/juicer/game-variants", wrapper.ListGameVariants)
	router.GET(baseURL+"/juicer/quick-games", wrapper.ListQuickGames)
	router.POST(baseURL+"/recovery/code", wrapper.CreateRecoveryCodeForIdentity)
	router.POST(baseURL+"/recovery/link", wrapper.CreateRecoveryLinkForIdentity)
	router.GET(baseURL+"/schemas", wrapper.ListIdentitySchemas)
	router.GET(baseURL+"/schemas/:id", wrapper.GetIdentitySchema)
	router.GET(baseURL+"/sessions", wrapper.ListSessions)
	router.DELETE(baseURL+"/sessions/:id", wrapper.DisableSession)
	router.GET(baseURL+"/sessions/:id", wrapper.GetSession)
	router.PATCH(baseURL+"/sessions/:id/extend", wrapper.ExtendSession)

}

type EmptyResponseResponse struct {
}

type GenericErrorJSONResponse Error

type NotFoundErrorJSONResponse Error

type UnexpectedErrorJSONResponse Error

type ListCourierMessagesRequestObject struct {
	Params ListCourierMessagesParams
}

type ListCourierMessagesResponseObject interface {
	VisitListCourierMessagesResponse(w http.ResponseWriter) error
}

type ListCourierMessages200JSONResponse []Message

func (response ListCourierMessages200JSONResponse) VisitListCourierMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListCourierMessages400JSONResponse struct{ GenericErrorJSONResponse }

func (response ListCourierMessages400JSONResponse) VisitListCourierMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListCourierMessagesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListCourierMessagesdefaultJSONResponse) VisitListCourierMessagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetCourierMessageRequestObject struct {
	ID string `json:"id"`
}

type GetCourierMessageResponseObject interface {
	VisitGetCourierMessageResponse(w http.ResponseWriter) error
}

type GetCourierMessage200JSONResponse Message

func (response GetCourierMessage200JSONResponse) VisitGetCourierMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCourierMessage400JSONResponse struct{ GenericErrorJSONResponse }

func (response GetCourierMessage400JSONResponse) VisitGetCourierMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCourierMessage404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetCourierMessage404JSONResponse) VisitGetCourierMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCourierMessagedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetCourierMessagedefaultJSONResponse) VisitGetCourierMessageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthAliveRequestObject struct {
}

type GetHealthAliveResponseObject interface {
	VisitGetHealthAliveResponse(w http.ResponseWriter) error
}

type GetHealthAlive200JSONResponse Healthy

func (response GetHealthAlive200JSONResponse) VisitGetHealthAliveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthAlivedefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthAlivedefaultJSONResponse) VisitGetHealthAliveResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetHealthReadyRequestObject struct {
}

type GetHealthReadyResponseObject interface {
	VisitGetHealthReadyResponse(w http.ResponseWriter) error
}

type GetHealthReady200JSONResponse Ready

func (response GetHealthReady200JSONResponse) VisitGetHealthReadyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthReadydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetHealthReadydefaultJSONResponse) VisitGetHealthReadyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListIdentitiesRequestObject struct {
	Params ListIdentitiesParams
}

type ListIdentitiesResponseObject interface {
	VisitListIdentitiesResponse(w http.ResponseWriter) error
}

type ListIdentities200JSONResponse []Identity

func (response ListIdentities200JSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentitiesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListIdentitiesdefaultJSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type BatchPatchIdentitiesRequestObject struct {
	Body *BatchPatchIdentitiesJSONRequestBody
}

type BatchPatchIdentitiesResponseObject interface {
	VisitBatchPatchIdentitiesResponse(w http.ResponseWriter) error
}

type BatchPatchIdentities200JSONResponse BatchPatchIdentitiesResponse

func (response BatchPatchIdentities200JSONResponse) VisitBatchPatchIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type BatchPatchIdentities400JSONResponse struct{ GenericErrorJSONResponse }

func (response BatchPatchIdentities400JSONResponse) VisitBatchPatchIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type BatchPatchIdentities409JSONResponse Error

func (response BatchPatchIdentities409JSONResponse) VisitBatchPatchIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type BatchPatchIdentitiesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response BatchPatchIdentitiesdefaultJSONResponse) VisitBatchPatchIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateIdentityRequestObject struct {
	Body *CreateIdentityJSONRequestBody
}

type CreateIdentityResponseObject interface {
	VisitCreateIdentityResponse(w http.ResponseWriter) error
}

type CreateIdentity201JSONResponse Identity

func (response CreateIdentity201JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity400JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateIdentity400JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentity409JSONResponse Error

func (response CreateIdentity409JSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateIdentitydefaultJSONResponse) VisitCreateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIdentityRequestObject struct {
	ID string `json:"id"`
}

type DeleteIdentityResponseObject interface {
	VisitDeleteIdentityResponse(w http.ResponseWriter) error
}

type DeleteIdentity204Response = EmptyResponseResponse

func (response DeleteIdentity204Response) VisitDeleteIdentityResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteIdentity404JSONResponse) VisitDeleteIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteIdentitydefaultJSONResponse) VisitDeleteIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentityRequestObject struct {
	ID     string `json:"id"`
	Params GetIdentityParams
}

type GetIdentityResponseObject interface {
	VisitGetIdentityResponse(w http.ResponseWriter) error
}

type GetIdentity200JSONResponse Identity

func (response GetIdentity200JSONResponse) VisitGetIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetIdentity404JSONResponse) VisitGetIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetIdentitydefaultJSONResponse) VisitGetIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PatchIdentityRequestObject struct {
	ID   string `json:"id"`
	Body *PatchIdentityJSONRequestBody
}

type PatchIdentityResponseObject interface {
	VisitPatchIdentityResponse(w http.ResponseWriter) error
}

type PatchIdentity200JSONResponse Identity

func (response PatchIdentity200JSONResponse) VisitPatchIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchIdentity400JSONResponse struct{ GenericErrorJSONResponse }

func (response PatchIdentity400JSONResponse) VisitPatchIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response PatchIdentity404JSONResponse) VisitPatchIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchIdentity409JSONResponse Error

func (response PatchIdentity409JSONResponse) VisitPatchIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PatchIdentitydefaultJSONResponse) VisitPatchIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateIdentityRequestObject struct {
	ID   string `json:"id"`
	Body *UpdateIdentityJSONRequestBody
}

type UpdateIdentityResponseObject interface {
	VisitUpdateIdentityResponse(w http.ResponseWriter) error
}

type UpdateIdentity200JSONResponse Identity

func (response UpdateIdentity200JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity400JSONResponse struct{ GenericErrorJSONResponse }

func (response UpdateIdentity400JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response UpdateIdentity404JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentity409JSONResponse Error

func (response UpdateIdentity409JSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type UpdateIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateIdentitydefaultJSONResponse) VisitUpdateIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIdentityCredentialsRequestObject struct {
	ID     string                              `json:"id"`
	Type   DeleteIdentityCredentialsParamsType `json:"type"`
	Params DeleteIdentityCredentialsParams
}

type DeleteIdentityCredentialsResponseObject interface {
	VisitDeleteIdentityCredentialsResponse(w http.ResponseWriter) error
}

type DeleteIdentityCredentials204Response = EmptyResponseResponse

func (response DeleteIdentityCredentials204Response) VisitDeleteIdentityCredentialsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIdentityCredentials404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteIdentityCredentials404JSONResponse) VisitDeleteIdentityCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIdentityCredentialsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteIdentityCredentialsdefaultJSONResponse) VisitDeleteIdentityCredentialsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DeleteIdentitySessionsRequestObject struct {
	ID string `json:"id"`
}

type DeleteIdentitySessionsResponseObject interface {
	VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error
}

type DeleteIdentitySessions204Response = EmptyResponseResponse

func (response DeleteIdentitySessions204Response) VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteIdentitySessions400JSONResponse struct{ GenericErrorJSONResponse }

func (response DeleteIdentitySessions400JSONResponse) VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIdentitySessions401JSONResponse struct{ UnexpectedErrorJSONResponse }

func (response DeleteIdentitySessions401JSONResponse) VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIdentitySessions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response DeleteIdentitySessions404JSONResponse) VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteIdentitySessionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DeleteIdentitySessionsdefaultJSONResponse) VisitDeleteIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListIdentitySessionsRequestObject struct {
	ID     string `json:"id"`
	Params ListIdentitySessionsParams
}

type ListIdentitySessionsResponseObject interface {
	VisitListIdentitySessionsResponse(w http.ResponseWriter) error
}

type ListIdentitySessions200JSONResponse []Session

func (response ListIdentitySessions200JSONResponse) VisitListIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentitySessions400JSONResponse struct{ GenericErrorJSONResponse }

func (response ListIdentitySessions400JSONResponse) VisitListIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentitySessions404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ListIdentitySessions404JSONResponse) VisitListIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentitySessionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListIdentitySessionsdefaultJSONResponse) VisitListIdentitySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetGameStatsRequestObject struct {
	UserID openapi_types.UUID `json:"user_id"`
}

type GetGameStatsResponseObject interface {
	VisitGetGameStatsResponse(w http.ResponseWriter) error
}

type GetGameStats200JSONResponse GameStats

func (response GetGameStats200JSONResponse) VisitGetGameStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetGameStats404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetGameStats404JSONResponse) VisitGetGameStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetGameStatsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetGameStatsdefaultJSONResponse) VisitGetGameStatsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListGameTimeCategoriesRequestObject struct {
}

type ListGameTimeCategoriesResponseObject interface {
	VisitListGameTimeCategoriesResponse(w http.ResponseWriter) error
}

type ListGameTimeCategories200JSONResponse []GameTimeCategory

func (response ListGameTimeCategories200JSONResponse) VisitListGameTimeCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGameTimeCategoriesdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListGameTimeCategoriesdefaultJSONResponse) VisitListGameTimeCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListGameTimeKindsRequestObject struct {
}

type ListGameTimeKindsResponseObject interface {
	VisitListGameTimeKindsResponse(w http.ResponseWriter) error
}

type ListGameTimeKinds200JSONResponse []GameTimeKind

func (response ListGameTimeKinds200JSONResponse) VisitListGameTimeKindsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGameTimeKindsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListGameTimeKindsdefaultJSONResponse) VisitListGameTimeKindsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListGameVariantsRequestObject struct {
}

type ListGameVariantsResponseObject interface {
	VisitListGameVariantsResponse(w http.ResponseWriter) error
}

type ListGameVariants200JSONResponse []GameVariant

func (response ListGameVariants200JSONResponse) VisitListGameVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListGameVariantsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListGameVariantsdefaultJSONResponse) VisitListGameVariantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListQuickGamesRequestObject struct {
}

type ListQuickGamesResponseObject interface {
	VisitListQuickGamesResponse(w http.ResponseWriter) error
}

type ListQuickGames200JSONResponse []QuickGame

func (response ListQuickGames200JSONResponse) VisitListQuickGamesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryCodeForIdentityRequestObject struct {
	Body *CreateRecoveryCodeForIdentityJSONRequestBody
}

type CreateRecoveryCodeForIdentityResponseObject interface {
	VisitCreateRecoveryCodeForIdentityResponse(w http.ResponseWriter) error
}

type CreateRecoveryCodeForIdentity201JSONResponse RecoveryCodeForIdentity

func (response CreateRecoveryCodeForIdentity201JSONResponse) VisitCreateRecoveryCodeForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryCodeForIdentity400JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateRecoveryCodeForIdentity400JSONResponse) VisitCreateRecoveryCodeForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryCodeForIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateRecoveryCodeForIdentity404JSONResponse) VisitCreateRecoveryCodeForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryCodeForIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRecoveryCodeForIdentitydefaultJSONResponse) VisitCreateRecoveryCodeForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateRecoveryLinkForIdentityRequestObject struct {
	Params CreateRecoveryLinkForIdentityParams
	Body   *CreateRecoveryLinkForIdentityJSONRequestBody
}

type CreateRecoveryLinkForIdentityResponseObject interface {
	VisitCreateRecoveryLinkForIdentityResponse(w http.ResponseWriter) error
}

type CreateRecoveryLinkForIdentity200JSONResponse RecoveryLinkForIdentity

func (response CreateRecoveryLinkForIdentity200JSONResponse) VisitCreateRecoveryLinkForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryLinkForIdentity400JSONResponse struct{ GenericErrorJSONResponse }

func (response CreateRecoveryLinkForIdentity400JSONResponse) VisitCreateRecoveryLinkForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryLinkForIdentity404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response CreateRecoveryLinkForIdentity404JSONResponse) VisitCreateRecoveryLinkForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateRecoveryLinkForIdentitydefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateRecoveryLinkForIdentitydefaultJSONResponse) VisitCreateRecoveryLinkForIdentityResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListIdentitySchemasRequestObject struct {
	Params ListIdentitySchemasParams
}

type ListIdentitySchemasResponseObject interface {
	VisitListIdentitySchemasResponse(w http.ResponseWriter) error
}

type ListIdentitySchemas200JSONResponse IdentitySchemas

func (response ListIdentitySchemas200JSONResponse) VisitListIdentitySchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentitySchemasdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListIdentitySchemasdefaultJSONResponse) VisitListIdentitySchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetIdentitySchemaRequestObject struct {
	ID string `json:"id"`
}

type GetIdentitySchemaResponseObject interface {
	VisitGetIdentitySchemaResponse(w http.ResponseWriter) error
}

type GetIdentitySchema200JSONResponse IdentitySchema

func (response GetIdentitySchema200JSONResponse) VisitGetIdentitySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentitySchema404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response GetIdentitySchema404JSONResponse) VisitGetIdentitySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetIdentitySchemadefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetIdentitySchemadefaultJSONResponse) VisitGetIdentitySchemaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ListSessionsRequestObject struct {
	Params ListSessionsParams
}

type ListSessionsResponseObject interface {
	VisitListSessionsResponse(w http.ResponseWriter) error
}

type ListSessions200JSONResponse []Session

func (response ListSessions200JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSessions400JSONResponse struct{ GenericErrorJSONResponse }

func (response ListSessions400JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListSessionsdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListSessionsdefaultJSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type DisableSessionRequestObject struct {
	ID string `json:"id"`
}

type DisableSessionResponseObject interface {
	VisitDisableSessionResponse(w http.ResponseWriter) error
}

type DisableSession204Response = EmptyResponseResponse

func (response DisableSession204Response) VisitDisableSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DisableSession400JSONResponse struct{ GenericErrorJSONResponse }

func (response DisableSession400JSONResponse) VisitDisableSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DisableSession401JSONResponse Error

func (response DisableSession401JSONResponse) VisitDisableSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DisableSessiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response DisableSessiondefaultJSONResponse) VisitDisableSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetSessionRequestObject struct {
	ID     string `json:"id"`
	Params GetSessionParams
}

type GetSessionResponseObject interface {
	VisitGetSessionResponse(w http.ResponseWriter) error
}

type GetSession200JSONResponse Session

func (response GetSession200JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSession400JSONResponse struct{ GenericErrorJSONResponse }

func (response GetSession400JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSessiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetSessiondefaultJSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExtendSessionRequestObject struct {
	ID string `json:"id"`
}

type ExtendSessionResponseObject interface {
	VisitExtendSessionResponse(w http.ResponseWriter) error
}

type ExtendSession200JSONResponse Session

func (response ExtendSession200JSONResponse) VisitExtendSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ExtendSession204Response = EmptyResponseResponse

func (response ExtendSession204Response) VisitExtendSessionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ExtendSession400JSONResponse struct{ GenericErrorJSONResponse }

func (response ExtendSession400JSONResponse) VisitExtendSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ExtendSession404JSONResponse struct{ NotFoundErrorJSONResponse }

func (response ExtendSession404JSONResponse) VisitExtendSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ExtendSessiondefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ExtendSessiondefaultJSONResponse) VisitExtendSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List Messages
	// (GET /courier/messages)
	ListCourierMessages(ctx context.Context, request ListCourierMessagesRequestObject) (ListCourierMessagesResponseObject, error)
	// Get a Message
	// (GET /courier/messages/{id})
	GetCourierMessage(ctx context.Context, request GetCourierMessageRequestObject) (GetCourierMessageResponseObject, error)
	// Check if server is healthy
	// (GET /health/alive)
	GetHealthAlive(ctx context.Context, request GetHealthAliveRequestObject) (GetHealthAliveResponseObject, error)
	// Check if server is ready
	// (GET /health/ready)
	GetHealthReady(ctx context.Context, request GetHealthReadyRequestObject) (GetHealthReadyResponseObject, error)
	// List Identities
	// (GET /identities)
	ListIdentities(ctx context.Context, request ListIdentitiesRequestObject) (ListIdentitiesResponseObject, error)
	// Create multiple identities
	// (PATCH /identities)
	BatchPatchIdentities(ctx context.Context, request BatchPatchIdentitiesRequestObject) (BatchPatchIdentitiesResponseObject, error)
	// Create an Identity
	// (POST /identities)
	CreateIdentity(ctx context.Context, request CreateIdentityRequestObject) (CreateIdentityResponseObject, error)
	// Delete an Identity
	// (DELETE /identities/{id})
	DeleteIdentity(ctx context.Context, request DeleteIdentityRequestObject) (DeleteIdentityResponseObject, error)
	// Get an Identity
	// (GET /identities/{id})
	GetIdentity(ctx context.Context, request GetIdentityRequestObject) (GetIdentityResponseObject, error)
	// Patch an Identity
	// (PATCH /identities/{id})
	PatchIdentity(ctx context.Context, request PatchIdentityRequestObject) (PatchIdentityResponseObject, error)
	// Update an Identity
	// (PUT /identities/{id})
	UpdateIdentity(ctx context.Context, request UpdateIdentityRequestObject) (UpdateIdentityResponseObject, error)
	// Delete a credential for a specific identity
	// (DELETE /identities/{id}/credentials/{type})
	DeleteIdentityCredentials(ctx context.Context, request DeleteIdentityCredentialsRequestObject) (DeleteIdentityCredentialsResponseObject, error)
	// Delete & Invalidate an Identity's Sessions
	// (DELETE /identities/{id}/sessions)
	DeleteIdentitySessions(ctx context.Context, request DeleteIdentitySessionsRequestObject) (DeleteIdentitySessionsResponseObject, error)
	// List an Identity's Sessions
	// (GET /identities/{id}/sessions)
	ListIdentitySessions(ctx context.Context, request ListIdentitySessionsRequestObject) (ListIdentitySessionsResponseObject, error)
	// Return game stats for user
	// (GET /juicer/game-stats/{user_id})
	GetGameStats(ctx context.Context, request GetGameStatsRequestObject) (GetGameStatsResponseObject, error)
	// Return game time categories
	// (GET /juicer/game-time-categories)
	ListGameTimeCategories(ctx context.Context, request ListGameTimeCategoriesRequestObject) (ListGameTimeCategoriesResponseObject, error)
	// Return game time kinds
	// (GET /juicer/game-time-kinds)
	ListGameTimeKinds(ctx context.Context, request ListGameTimeKindsRequestObject) (ListGameTimeKindsResponseObject, error)
	// Return game variants
	// (GET /juicer/game-variants)
	ListGameVariants(ctx context.Context, request ListGameVariantsRequestObject) (ListGameVariantsResponseObject, error)
	// Return quick games
	// (GET /juicer/quick-games)
	ListQuickGames(ctx context.Context, request ListQuickGamesRequestObject) (ListQuickGamesResponseObject, error)
	// Create a Recovery Code
	// (POST /recovery/code)
	CreateRecoveryCodeForIdentity(ctx context.Context, request CreateRecoveryCodeForIdentityRequestObject) (CreateRecoveryCodeForIdentityResponseObject, error)
	// Create a Recovery Link
	// (POST /recovery/link)
	CreateRecoveryLinkForIdentity(ctx context.Context, request CreateRecoveryLinkForIdentityRequestObject) (CreateRecoveryLinkForIdentityResponseObject, error)
	// Get all Identity Schemas
	// (GET /schemas)
	ListIdentitySchemas(ctx context.Context, request ListIdentitySchemasRequestObject) (ListIdentitySchemasResponseObject, error)
	// Get Identity JSON Schema
	// (GET /schemas/{id})
	GetIdentitySchema(ctx context.Context, request GetIdentitySchemaRequestObject) (GetIdentitySchemaResponseObject, error)
	// List All Sessions
	// (GET /sessions)
	ListSessions(ctx context.Context, request ListSessionsRequestObject) (ListSessionsResponseObject, error)
	// Deactivate a Session
	// (DELETE /sessions/{id})
	DisableSession(ctx context.Context, request DisableSessionRequestObject) (DisableSessionResponseObject, error)
	// Get Session
	// (GET /sessions/{id})
	GetSession(ctx context.Context, request GetSessionRequestObject) (GetSessionResponseObject, error)
	// Extend a Session
	// (PATCH /sessions/{id}/extend)
	ExtendSession(ctx context.Context, request ExtendSessionRequestObject) (ExtendSessionResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListCourierMessages operation middleware
func (sh *strictHandler) ListCourierMessages(ctx echo.Context, params ListCourierMessagesParams) error {
	var request ListCourierMessagesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListCourierMessages(ctx.Request().Context(), request.(ListCourierMessagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListCourierMessages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListCourierMessagesResponseObject); ok {
		return validResponse.VisitListCourierMessagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCourierMessage operation middleware
func (sh *strictHandler) GetCourierMessage(ctx echo.Context, id string) error {
	var request GetCourierMessageRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCourierMessage(ctx.Request().Context(), request.(GetCourierMessageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCourierMessage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCourierMessageResponseObject); ok {
		return validResponse.VisitGetCourierMessageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealthAlive operation middleware
func (sh *strictHandler) GetHealthAlive(ctx echo.Context) error {
	var request GetHealthAliveRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthAlive(ctx.Request().Context(), request.(GetHealthAliveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthAlive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthAliveResponseObject); ok {
		return validResponse.VisitGetHealthAliveResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealthReady operation middleware
func (sh *strictHandler) GetHealthReady(ctx echo.Context) error {
	var request GetHealthReadyRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealthReady(ctx.Request().Context(), request.(GetHealthReadyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealthReady")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthReadyResponseObject); ok {
		return validResponse.VisitGetHealthReadyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListIdentities operation middleware
func (sh *strictHandler) ListIdentities(ctx echo.Context, params ListIdentitiesParams) error {
	var request ListIdentitiesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentities(ctx.Request().Context(), request.(ListIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListIdentitiesResponseObject); ok {
		return validResponse.VisitListIdentitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// BatchPatchIdentities operation middleware
func (sh *strictHandler) BatchPatchIdentities(ctx echo.Context) error {
	var request BatchPatchIdentitiesRequestObject

	var body BatchPatchIdentitiesJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.BatchPatchIdentities(ctx.Request().Context(), request.(BatchPatchIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "BatchPatchIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(BatchPatchIdentitiesResponseObject); ok {
		return validResponse.VisitBatchPatchIdentitiesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateIdentity operation middleware
func (sh *strictHandler) CreateIdentity(ctx echo.Context) error {
	var request CreateIdentityRequestObject

	var body CreateIdentityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateIdentity(ctx.Request().Context(), request.(CreateIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateIdentityResponseObject); ok {
		return validResponse.VisitCreateIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteIdentity operation middleware
func (sh *strictHandler) DeleteIdentity(ctx echo.Context, id string) error {
	var request DeleteIdentityRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIdentity(ctx.Request().Context(), request.(DeleteIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteIdentityResponseObject); ok {
		return validResponse.VisitDeleteIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetIdentity operation middleware
func (sh *strictHandler) GetIdentity(ctx echo.Context, id string, params GetIdentityParams) error {
	var request GetIdentityRequestObject

	request.ID = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentity(ctx.Request().Context(), request.(GetIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetIdentityResponseObject); ok {
		return validResponse.VisitGetIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchIdentity operation middleware
func (sh *strictHandler) PatchIdentity(ctx echo.Context, id string) error {
	var request PatchIdentityRequestObject

	request.ID = id

	var body PatchIdentityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchIdentity(ctx.Request().Context(), request.(PatchIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchIdentityResponseObject); ok {
		return validResponse.VisitPatchIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateIdentity operation middleware
func (sh *strictHandler) UpdateIdentity(ctx echo.Context, id string) error {
	var request UpdateIdentityRequestObject

	request.ID = id

	var body UpdateIdentityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateIdentity(ctx.Request().Context(), request.(UpdateIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateIdentityResponseObject); ok {
		return validResponse.VisitUpdateIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteIdentityCredentials operation middleware
func (sh *strictHandler) DeleteIdentityCredentials(ctx echo.Context, id string, pType DeleteIdentityCredentialsParamsType, params DeleteIdentityCredentialsParams) error {
	var request DeleteIdentityCredentialsRequestObject

	request.ID = id
	request.Type = pType
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIdentityCredentials(ctx.Request().Context(), request.(DeleteIdentityCredentialsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIdentityCredentials")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteIdentityCredentialsResponseObject); ok {
		return validResponse.VisitDeleteIdentityCredentialsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteIdentitySessions operation middleware
func (sh *strictHandler) DeleteIdentitySessions(ctx echo.Context, id string) error {
	var request DeleteIdentitySessionsRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteIdentitySessions(ctx.Request().Context(), request.(DeleteIdentitySessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteIdentitySessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteIdentitySessionsResponseObject); ok {
		return validResponse.VisitDeleteIdentitySessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListIdentitySessions operation middleware
func (sh *strictHandler) ListIdentitySessions(ctx echo.Context, id string, params ListIdentitySessionsParams) error {
	var request ListIdentitySessionsRequestObject

	request.ID = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentitySessions(ctx.Request().Context(), request.(ListIdentitySessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentitySessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListIdentitySessionsResponseObject); ok {
		return validResponse.VisitListIdentitySessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetGameStats operation middleware
func (sh *strictHandler) GetGameStats(ctx echo.Context, userID openapi_types.UUID) error {
	var request GetGameStatsRequestObject

	request.UserID = userID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetGameStats(ctx.Request().Context(), request.(GetGameStatsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetGameStats")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetGameStatsResponseObject); ok {
		return validResponse.VisitGetGameStatsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGameTimeCategories operation middleware
func (sh *strictHandler) ListGameTimeCategories(ctx echo.Context) error {
	var request ListGameTimeCategoriesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListGameTimeCategories(ctx.Request().Context(), request.(ListGameTimeCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGameTimeCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListGameTimeCategoriesResponseObject); ok {
		return validResponse.VisitListGameTimeCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGameTimeKinds operation middleware
func (sh *strictHandler) ListGameTimeKinds(ctx echo.Context) error {
	var request ListGameTimeKindsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListGameTimeKinds(ctx.Request().Context(), request.(ListGameTimeKindsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGameTimeKinds")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListGameTimeKindsResponseObject); ok {
		return validResponse.VisitListGameTimeKindsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListGameVariants operation middleware
func (sh *strictHandler) ListGameVariants(ctx echo.Context) error {
	var request ListGameVariantsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListGameVariants(ctx.Request().Context(), request.(ListGameVariantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListGameVariants")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListGameVariantsResponseObject); ok {
		return validResponse.VisitListGameVariantsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListQuickGames operation middleware
func (sh *strictHandler) ListQuickGames(ctx echo.Context) error {
	var request ListQuickGamesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListQuickGames(ctx.Request().Context(), request.(ListQuickGamesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListQuickGames")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListQuickGamesResponseObject); ok {
		return validResponse.VisitListQuickGamesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRecoveryCodeForIdentity operation middleware
func (sh *strictHandler) CreateRecoveryCodeForIdentity(ctx echo.Context) error {
	var request CreateRecoveryCodeForIdentityRequestObject

	var body CreateRecoveryCodeForIdentityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRecoveryCodeForIdentity(ctx.Request().Context(), request.(CreateRecoveryCodeForIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRecoveryCodeForIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRecoveryCodeForIdentityResponseObject); ok {
		return validResponse.VisitCreateRecoveryCodeForIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRecoveryLinkForIdentity operation middleware
func (sh *strictHandler) CreateRecoveryLinkForIdentity(ctx echo.Context, params CreateRecoveryLinkForIdentityParams) error {
	var request CreateRecoveryLinkForIdentityRequestObject

	request.Params = params

	var body CreateRecoveryLinkForIdentityJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRecoveryLinkForIdentity(ctx.Request().Context(), request.(CreateRecoveryLinkForIdentityRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRecoveryLinkForIdentity")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRecoveryLinkForIdentityResponseObject); ok {
		return validResponse.VisitCreateRecoveryLinkForIdentityResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListIdentitySchemas operation middleware
func (sh *strictHandler) ListIdentitySchemas(ctx echo.Context, params ListIdentitySchemasParams) error {
	var request ListIdentitySchemasRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentitySchemas(ctx.Request().Context(), request.(ListIdentitySchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentitySchemas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListIdentitySchemasResponseObject); ok {
		return validResponse.VisitListIdentitySchemasResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetIdentitySchema operation middleware
func (sh *strictHandler) GetIdentitySchema(ctx echo.Context, id string) error {
	var request GetIdentitySchemaRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetIdentitySchema(ctx.Request().Context(), request.(GetIdentitySchemaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetIdentitySchema")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetIdentitySchemaResponseObject); ok {
		return validResponse.VisitGetIdentitySchemaResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ListSessions operation middleware
func (sh *strictHandler) ListSessions(ctx echo.Context, params ListSessionsParams) error {
	var request ListSessionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListSessions(ctx.Request().Context(), request.(ListSessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListSessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListSessionsResponseObject); ok {
		return validResponse.VisitListSessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DisableSession operation middleware
func (sh *strictHandler) DisableSession(ctx echo.Context, id string) error {
	var request DisableSessionRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DisableSession(ctx.Request().Context(), request.(DisableSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DisableSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DisableSessionResponseObject); ok {
		return validResponse.VisitDisableSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSession operation middleware
func (sh *strictHandler) GetSession(ctx echo.Context, id string, params GetSessionParams) error {
	var request GetSessionRequestObject

	request.ID = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSession(ctx.Request().Context(), request.(GetSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSessionResponseObject); ok {
		return validResponse.VisitGetSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ExtendSession operation middleware
func (sh *strictHandler) ExtendSession(ctx echo.Context, id string) error {
	var request ExtendSessionRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExtendSession(ctx.Request().Context(), request.(ExtendSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExtendSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ExtendSessionResponseObject); ok {
		return validResponse.VisitExtendSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
