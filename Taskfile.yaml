# https://taskfile.dev

version: "3"

env:
  ENV: '{{.ENV | default "development"}}'

vars:
  DIR:
    sh: pwd
  DIR_NAME:
    sh: basename {{.DIR}}
  DOTENV_FILE:
    sh: >-
      if [ "${ENV}" == "production" ]; then
        echo .env.production
      else
        echo .env
      fi

dotenv: ["{{.DOTENV_FILE}}"]

tasks:
  # ----------------------------------------------------------------------------

  default:
    cmds:
      - task -l
    silent: true

  gen:
    desc: Run go generate
    cmds:
      - go generate ./...

  vet:
    desc: Run go vet analyzer
    cmds:
      - go vet ./...

  tidy:
    desc: Tidy dependencies
    cmds:
      - go mod tidy

  lint:
    desc: Lint code with golangci-lint
    cmds:
      - golangci-lint run

  fmt:
    desc: Format code with go fmt
    cmds:
      - go fmt ./...

  test:
    desc: Run tests
    cmds:
      - go test ./...

  test:verbose:
    desc: Run tests in verbose mode
    cmds:
      - go test -v ./...

  test:race:
    desc: Run tests in with race condition check
    cmds:
      - go test -race ./...

  test:racev:
    desc: Run tests in verbose mode with race condition check
    cmds:
      - go test -v -race ./...

  test:coverage:
    desc: Perform test coverage
    cmds:
      - go test -cover ./...
  # ----------------------------------------------------------------------------

  watch:
    desc: Run docker compose watch
    cmds:
      - docker compose watch

  up:
    desc: Run docker compose up -d
    cmds:
      - docker compose up -d

  down:
    desc: Run docker compose down
    cmds:
      - docker compose down

  stop:
    desc: Run docker compose stop
    cmds:
      - docker compose stop

  restart:
    desc: Run docker compose restart
    cmds:
      - docker compose restart

  prune:
    desc: Run docker system prune
    cmds:
      - docker system prune -a -f

  prune:all:
    desc: Run docker system prune including volumes
    cmds:
      - docker system prune -a -f --volumes

  # ----------------------------------------------------------------------------

  mg:create:
    desc: Create new db migrations
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" create -format unix -ext sql -dir /migrations {{.CLI_ARGS}}

  mg:up:
    desc: Run db migrations up
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" up {{.CLI_ARGS}}

  mg:down:
    desc: Run db migrations down
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" down {{.CLI_ARGS}}

  mg:goto:
    desc: Run db migrations goto version
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" goto {{.CLI_ARGS}}

  mg:force:
    desc: Run db migrations force version
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" force {{.CLI_ARGS}}

  mg:drop:
    desc: Run db migrations drop
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" drop {{.CLI_ARGS}}

  mg:version:
    desc: Show db migrations version
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" version {{.CLI_ARGS}}

  mg:help:
    desc: Show db migrations help
    cmds:
      - docker run -it -v {{.DIR}}/ent/migrations:/migrations --network {{.DIR_NAME}}_intranet migrate/migrate -path=/migrations -database "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@${DATABASE__HOST}:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable&x-migrations-table=\"gomigrate_schema_migrations\"&x-migrations-table-quoted=1" help

  # ----------------------------------------------------------------------------

  sh:juicer:
    desc: Shell into juicer docker container
    cmds:
      - docker compose exec -it juicer sh

  sh:kratos:
    desc: Shell into kratos docker container
    cmds:
      - docker compose exec -it kratos sh

  sh:keto:
    desc: Shell into keto docker container
    cmds:
      - docker compose exec -it keto sh

  sh:pg:
    desc: Shell into postgresql docker container
    cmds:
      - docker compose exec -it postgresql sh

  sh:redis:
    desc: Shell into redis docker container
    cmds:
      - docker compose exec -it redis sh

  sh:mailpit:
    desc: Shell into mailpit docker container
    cmds:
      - docker compose exec -it mailpit sh

  # ----------------------------------------------------------------------------

  psql:
    desc: Connect to postgres with psql
    cmds:
      - docker compose exec -it ${DATABASE__HOST} psql "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@127.0.0.1:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable"

  pgcli:
    desc: Connect to postgres with pgcli
    env:
      DSN: "" # OVERRIDE `DSN` ENV variable to empty string because pgcli uses it for it's alias inside pgclirc cfg
      PGCLIRC: "~/.config/pgcli/config"
    cmds:
      - pgcli "postgres://${DATABASE__USER}:${DATABASE__PASSWORD}@127.0.0.1:${DATABASE__PORT}/${DATABASE__DB}?sslmode=disable"

  rediscli:
    desc: Connect to redis with redis cli
    cmds:
      - docker compose exec -it redis redis-cli

  # ----------------------------------------------------------------------------

  i18n:extract:
    desc: Extract translation files
    cmds:
      - goi18n extract -format=json -outdir=locales
      - goi18n merge -format=json -outdir=locales locales/active.*.json

  i18n:merge:
    desc: Merge translation files
    cmds:
      - goi18n merge -format=json -outdir=locales locales/active.*.json locales/translate.$@.json

  # ----------------------------------------------------------------------------

  kratos:import-identity:
    desc: Import kratos identity
    cmds:
      - docker exec kratos /bin/sh -c "cd /etc/config/kratos/imports && kratos import identity employees.json customers.json -e http://127.0.0.1:4434"

  keto:create-tuples:
    desc: Create keto relation tuples
    cmds:
      - docker exec keto /bin/sh -c "keto relation-tuple create /etc/config/keto/relation-tuples -c /etc/config/keto/keto.yaml"

  # ----------------------------------------------------------------------------

  lint:dockerfiles:
    desc: Lint every dockerfile in docker dir
    cmds:
      - docker container run -v "{{.DIR}}/docker:/dockerfiles" --rm -i hadolint/hadolint hadolint --ignore DL3018 /dockerfiles/app.dockerfile /dockerfiles/devspace.dockerfile /dockerfiles/goreleaser.dockerfile

  # ----------------------------------------------------------------------------

  k:dev:
    desc: Build and apply dev manifests
    cmds:
      - task: h:install:cert-manager
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.7.1/experimental-install.yaml
      - kubectl -n cert-manager wait --for condition=established --timeout=5s crd/certificaterequests.cert-manager.io crd/certificates.cert-manager.io crd/challenges.acme.cert-manager.io crd/clusterissuers.cert-manager.io crd/issuers.cert-manager.io crd/orders.acme.cert-manager.io
      - kubectl -n cert-manager wait --for=condition=ready --timeout=15s pod -l app=webhook -l app.kubernetes.io/name=webhook -l app.kubernetes.io/instance=cert-manager
      - kubectl -n gateway-system wait --for=condition=ready --timeout=15s pod -l name=gateway-api-admission-server
      - kustomize build --enable-alpha-plugins --enable-exec k8s/common/overlays/dev | kubectl apply -f -
      - task: h:install:postgresql
      - task: h:install:redis
      - task: h:install:traefik
      - kustomize build --enable-alpha-plugins --enable-exec k8s/kratos/overlays/dev | kubectl apply -f -
      - kustomize build --enable-alpha-plugins --enable-exec k8s/juicer/overlays/dev | kubectl apply -f -

  k:prod:
    desc: Build and apply prod manifests
    cmds:
      - kubectl apply -f k8s/initial/traefik-crd.yaml -f k8s/initial/cert-manager.yaml
      - kubectl -n cert-manager wait --for condition=established --timeout=15s crd.apiextensions.k8s.io/certificaterequests.cert-manager.io crd.apiextensions.k8s.io/certificates.cert-manager.io crd.apiextensions.k8s.io/challenges.acme.cert-manager.io crd.apiextensions.k8s.io/clusterissuers.cert-manager.io crd.apiextensions.k8s.io/issuers.cert-manager.io crd.apiextensions.k8s.io/orders.acme.cert-manager.io crd.apiextensions.k8s.io/gatewayclasses.gateway.networking.k8s.io crd.apiextensions.k8s.io/gateways.gateway.networking.k8s.io crd.apiextensions.k8s.io/httproutes.gateway.networking.k8s.io
      - kubectl -n cert-manager wait --for=condition=ready --timeout=15s pod -l app.kubernetes.io/name=webhook
      - kustomize build --enable-alpha-plugins --enable-exec k8s/initial | kubectl apply -f -
      - kustomize build --enable-alpha-plugins --enable-exec k8s/postgresql/overlays/prod | kubectl apply -f -
      - kustomize build --enable-alpha-plugins --enable-exec k8s/redis/overlays/prod | kubectl apply -f -
      - kustomize build --enable-alpha-plugins --enable-exec k8s/kratos/overlays/prod | kubectl apply -f -
      - kustomize build --enable-alpha-plugins --enable-exec k8s/juicer/overlays/prod | kubectl apply -f -

  # ----------------------------------------------------------------------------

  cluster:create:
    desc: Create new k3d cluster
    cmds:
      - k3d cluster create dev -p "8081:80@loadbalancer" --k3s-arg="--disable=traefik@server:0"

  cluster:delete:
    desc: Create new k3d cluster
    cmds:
      - k3d cluster delete dev

  # ----------------------------------------------------------------------------

  crd:update-traefik:
    desc: Update traefik CRDs manually with force conflicts
    cmds:
      - kubectl apply --server-side --force-conflicts -k https://github.com/traefik/traefik-helm-chart/traefik/crds/

  # ----------------------------------------------------------------------------

  h:repo:add:
    desc: Helm add repositories
    cmds:
      - helm repo add jetstack https://charts.jetstack.io
      - helm repo add cnpg https://cloudnative-pg.github.io/charts
      - helm repo add traefik https://traefik.github.io/charts
      - helm repo add ory https://k8s.ory.sh/helm/charts
      - helm repo add bitnami https://charts.bitnami.com/bitnami

  h:repo:remove:
    desc: Helm remove repositories
    cmds:
      - helm repo remove jetstack https://charts.jetstack.io
      - helm repo remove cnpg https://cloudnative-pg.github.io/charts
      - helm repo remove traefik https://traefik.github.io/charts
      - helm repo remove ory https://k8s.ory.sh/helm/charts
      - helm repo remove bitnami https://charts.bitnami.com/bitnami

  h:repo:update:
    desc: Helm update repositories
    cmds:
      - helm repo update

  h:install:
    desc: Helm install
    cmds:
      - task: h:install:cert-manager
      - task: h:install:postgresql
      - task: h:install:redis
      - task: h:install:traefik

  h:install:postgresql:
    desc: Helm install postgresql
    cmds:
      - helm secrets install postgresql bitnami/postgresql -n dev --create-namespace -f k8s/postgresql/dev-values.yaml -f k8s/postgresql/dev-secrets.yaml

  h:install:redis:
    desc: Helm install redis
    cmds:
      - helm secrets install redis bitnami/redis -n dev --create-namespace -f k8s/redis/dev-values.yaml -f k8s/redis/dev-secrets.yaml

  h:install:cert-manager:
    desc: Helm install cert manager
    cmds:
      - helm install cert-manager jetstack/cert-manager -n cert-manager --create-namespace -f k8s/cert-manager/dev-values.yaml

  h:install:traefik:
    desc: Helm install traefik
    cmds:
      # - helm install traefik traefik/traefik -n traefik --create-namespace -f k8s/traefik/dev-values.yaml
      - helm install traefik traefik/traefik -n dev --create-namespace -f k8s/traefik/dev-values.yaml

  h:delete:
    desc: Helm delete
    cmds:
      - task: h:delete:cert-manager
      - task: h:delete:traefik
      - task: h:delete:postgresql
      - task: h:delete:redis

  h:delete:postgresql:
    desc: Helm delete postgresql
    cmds:
      - helm delete postgresql -n dev

  h:delete:redis:
    desc: Helm delete redis
    cmds:
      - helm delete redis -n dev

  h:delete:cert-manager:
    desc: Helm delete cert manager
    cmds:
      - helm delete cert-manager -n cert-manager

  h:delete:traefik:
    desc: Helm delete traefik
    cmds:
      - helm delete traefik -n traefik

  # ----------------------------------------------------------------------------

  k:wat:
    cmds:
      - task: h:install:cert-manager
      - kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v0.7.1/experimental-install.yaml
      - kubectl -n cert-manager wait --for condition=established --timeout=5s crd/certificaterequests.cert-manager.io crd/certificates.cert-manager.io crd/challenges.acme.cert-manager.io crd/clusterissuers.cert-manager.io crd/issuers.cert-manager.io crd/orders.acme.cert-manager.io
      - kubectl -n cert-manager wait --for=condition=ready --timeout=15s pod -l app=webhook -l app.kubernetes.io/name=webhook -l app.kubernetes.io/instance=cert-manager
      - kubectl -n gateway-system wait --for=condition=ready --timeout=15s pod -l name=gateway-api-admission-server
      - kustomize build --enable-alpha-plugins --enable-exec k8s/common/overlays/dev | kubectl apply -f -
      - task: h:install:traefik
      - kustomize build --enable-alpha-plugins --enable-exec k8s/juicer/overlays/dev | kubectl apply -f -
