//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GameTimeCategory = newGameTimeCategoryTable("public", "game_time_category", "")

type gameTimeCategoryTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	Name               postgres.ColumnString
	UpperTimeLimitSecs postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type GameTimeCategoryTable struct {
	gameTimeCategoryTable

	EXCLUDED gameTimeCategoryTable
}

// AS creates new GameTimeCategoryTable with assigned alias
func (a GameTimeCategoryTable) AS(alias string) *GameTimeCategoryTable {
	return newGameTimeCategoryTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GameTimeCategoryTable with assigned schema name
func (a GameTimeCategoryTable) FromSchema(schemaName string) *GameTimeCategoryTable {
	return newGameTimeCategoryTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GameTimeCategoryTable with assigned table prefix
func (a GameTimeCategoryTable) WithPrefix(prefix string) *GameTimeCategoryTable {
	return newGameTimeCategoryTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GameTimeCategoryTable with assigned table suffix
func (a GameTimeCategoryTable) WithSuffix(suffix string) *GameTimeCategoryTable {
	return newGameTimeCategoryTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGameTimeCategoryTable(schemaName, tableName, alias string) *GameTimeCategoryTable {
	return &GameTimeCategoryTable{
		gameTimeCategoryTable: newGameTimeCategoryTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newGameTimeCategoryTableImpl("", "excluded", ""),
	}
}

func newGameTimeCategoryTableImpl(schemaName, tableName, alias string) gameTimeCategoryTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		NameColumn               = postgres.StringColumn("name")
		UpperTimeLimitSecsColumn = postgres.IntegerColumn("upper_time_limit_secs")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, NameColumn, UpperTimeLimitSecsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{NameColumn, UpperTimeLimitSecsColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return gameTimeCategoryTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Name:               NameColumn,
		UpperTimeLimitSecs: UpperTimeLimitSecsColumn,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
