//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GameMove = newGameMoveTable("public", "game_move", "")

type gameMoveTable struct {
	postgres.Table

	// Columns
	ID       postgres.ColumnInteger
	GameID   postgres.ColumnString
	Uci      postgres.ColumnString
	San      postgres.ColumnString
	PlayedAt postgres.ColumnTimestampz
	Fen      postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type GameMoveTable struct {
	gameMoveTable

	EXCLUDED gameMoveTable
}

// AS creates new GameMoveTable with assigned alias
func (a GameMoveTable) AS(alias string) *GameMoveTable {
	return newGameMoveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GameMoveTable with assigned schema name
func (a GameMoveTable) FromSchema(schemaName string) *GameMoveTable {
	return newGameMoveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GameMoveTable with assigned table prefix
func (a GameMoveTable) WithPrefix(prefix string) *GameMoveTable {
	return newGameMoveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GameMoveTable with assigned table suffix
func (a GameMoveTable) WithSuffix(suffix string) *GameMoveTable {
	return newGameMoveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGameMoveTable(schemaName, tableName, alias string) *GameMoveTable {
	return &GameMoveTable{
		gameMoveTable: newGameMoveTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newGameMoveTableImpl("", "excluded", ""),
	}
}

func newGameMoveTableImpl(schemaName, tableName, alias string) gameMoveTable {
	var (
		IDColumn       = postgres.IntegerColumn("id")
		GameIDColumn   = postgres.StringColumn("game_id")
		UciColumn      = postgres.StringColumn("uci")
		SanColumn      = postgres.StringColumn("san")
		PlayedAtColumn = postgres.TimestampzColumn("played_at")
		FenColumn      = postgres.StringColumn("fen")
		allColumns     = postgres.ColumnList{IDColumn, GameIDColumn, UciColumn, SanColumn, PlayedAtColumn, FenColumn}
		mutableColumns = postgres.ColumnList{GameIDColumn, UciColumn, SanColumn, PlayedAtColumn, FenColumn}
		defaultColumns = postgres.ColumnList{PlayedAtColumn}
	)

	return gameMoveTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:       IDColumn,
		GameID:   GameIDColumn,
		Uci:      UciColumn,
		San:      SanColumn,
		PlayedAt: PlayedAtColumn,
		Fen:      FenColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
