//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Rating = newRatingTable("public", "rating", "")

type ratingTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	UserID             postgres.ColumnString
	GameTimeCategoryID postgres.ColumnString
	Glicko             postgres.ColumnInteger
	Glicko2            postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestampz
	UpdatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type RatingTable struct {
	ratingTable

	EXCLUDED ratingTable
}

// AS creates new RatingTable with assigned alias
func (a RatingTable) AS(alias string) *RatingTable {
	return newRatingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RatingTable with assigned schema name
func (a RatingTable) FromSchema(schemaName string) *RatingTable {
	return newRatingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RatingTable with assigned table prefix
func (a RatingTable) WithPrefix(prefix string) *RatingTable {
	return newRatingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RatingTable with assigned table suffix
func (a RatingTable) WithSuffix(suffix string) *RatingTable {
	return newRatingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRatingTable(schemaName, tableName, alias string) *RatingTable {
	return &RatingTable{
		ratingTable: newRatingTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRatingTableImpl("", "excluded", ""),
	}
}

func newRatingTableImpl(schemaName, tableName, alias string) ratingTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		UserIDColumn             = postgres.StringColumn("user_id")
		GameTimeCategoryIDColumn = postgres.StringColumn("game_time_category_id")
		GlickoColumn             = postgres.IntegerColumn("glicko")
		Glicko2Column            = postgres.IntegerColumn("glicko2")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn          = postgres.TimestampzColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, UserIDColumn, GameTimeCategoryIDColumn, GlickoColumn, Glicko2Column, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{UserIDColumn, GameTimeCategoryIDColumn, GlickoColumn, Glicko2Column, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns           = postgres.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return ratingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		UserID:             UserIDColumn,
		GameTimeCategoryID: GameTimeCategoryIDColumn,
		Glicko:             GlickoColumn,
		Glicko2:            Glicko2Column,
		CreatedAt:          CreatedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
